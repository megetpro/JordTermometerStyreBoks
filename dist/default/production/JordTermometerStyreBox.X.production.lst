

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Apr 11 08:20:51 2025

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F819
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26     0000                     
    27                           ; Generated 12/10/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F819 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61     0000                     	;# 
    62     0001                     	;# 
    63     0002                     	;# 
    64     0003                     	;# 
    65     0004                     	;# 
    66     0005                     	;# 
    67     0006                     	;# 
    68     000A                     	;# 
    69     000B                     	;# 
    70     000C                     	;# 
    71     000D                     	;# 
    72     000E                     	;# 
    73     000E                     	;# 
    74     000F                     	;# 
    75     0010                     	;# 
    76     0011                     	;# 
    77     0012                     	;# 
    78     0013                     	;# 
    79     0014                     	;# 
    80     0015                     	;# 
    81     0015                     	;# 
    82     0016                     	;# 
    83     0017                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     0081                     	;# 
    87     0085                     	;# 
    88     0086                     	;# 
    89     008C                     	;# 
    90     008D                     	;# 
    91     008E                     	;# 
    92     008F                     	;# 
    93     0090                     	;# 
    94     0092                     	;# 
    95     0093                     	;# 
    96     0094                     	;# 
    97     009E                     	;# 
    98     009F                     	;# 
    99     010C                     	;# 
   100     010D                     	;# 
   101     010E                     	;# 
   102     010F                     	;# 
   103     018C                     	;# 
   104     018D                     	;# 
   105     0000                     	;# 
   106     0001                     	;# 
   107     0002                     	;# 
   108     0003                     	;# 
   109     0004                     	;# 
   110     0005                     	;# 
   111     0006                     	;# 
   112     000A                     	;# 
   113     000B                     	;# 
   114     000C                     	;# 
   115     000D                     	;# 
   116     000E                     	;# 
   117     000E                     	;# 
   118     000F                     	;# 
   119     0010                     	;# 
   120     0011                     	;# 
   121     0012                     	;# 
   122     0013                     	;# 
   123     0014                     	;# 
   124     0015                     	;# 
   125     0015                     	;# 
   126     0016                     	;# 
   127     0017                     	;# 
   128     001E                     	;# 
   129     001F                     	;# 
   130     0081                     	;# 
   131     0085                     	;# 
   132     0086                     	;# 
   133     008C                     	;# 
   134     008D                     	;# 
   135     008E                     	;# 
   136     008F                     	;# 
   137     0090                     	;# 
   138     0092                     	;# 
   139     0093                     	;# 
   140     0094                     	;# 
   141     009E                     	;# 
   142     009F                     	;# 
   143     010C                     	;# 
   144     010D                     	;# 
   145     010E                     	;# 
   146     010F                     	;# 
   147     018C                     	;# 
   148     018D                     	;# 
   149     0005                     _PORTAbits	set	5
   150     0006                     _PORTB	set	6
   151     0005                     _PORTA	set	5
   152     0081                     _OPTION_REG	set	129
   153     0085                     _TRISA	set	133
   154     0086                     _TRISB	set	134
   155     009F                     _ADCON1	set	159
   156                           
   157                           	psect	strings
   158     0001                     __pstrings:
   159     0001                     stringtab:
   160     0001                     __stringtab:
   161                           
   162                           ;	String table - string pointers are 1 byte each
   163     0001  1BFF               	btfsc	btemp+1,7
   164     0002  280B               	ljmp	stringcode
   165     0003  1383               	bcf	3,7
   166     0004  187F               	btfsc	btemp+1,0
   167     0005  1783               	bsf	3,7
   168     0006  0800               	movf	0,w
   169     0007  0A84               	incf	4,f
   170     0008  1903               	skipnz
   171     0009  0AFF               	incf	btemp+1,f
   172     000A  0008               	return
   173     000B                     stringcode:
   174     000B                     stringdir:
   175     000B  3000               	movlw	high stringdir
   176     000C  008A               	movwf	10
   177     000D  0804               	movf	4,w
   178     000E  0A84               	incf	4,f
   179     000F  0782               	addwf	2,f
   180     0010                     __stringbase:
   181     0010  3400               	retlw	0
   182     0011                     __end_of__stringtab:
   183     0011                     STR_3:
   184     0011  3420               	retlw	32	;' '
   185     0012  3445               	retlw	69	;'E'
   186     0013  3472               	retlw	114	;'r'
   187     0014  3472               	retlw	114	;'r'
   188     0015  3400               	retlw	0
   189     0016                     STR_2:
   190     0016  3420               	retlw	32	;' '
   191     0017  344C               	retlw	76	;'L'
   192     0018  346F               	retlw	111	;'o'
   193     0019  3477               	retlw	119	;'w'
   194     001A  3400               	retlw	0
   195     001B                     STR_1:
   196     001B  344F               	retlw	79	;'O'
   197     001C  346B               	retlw	107	;'k'
   198     001D  3461               	retlw	97	;'a'
   199     001E  3479               	retlw	121	;'y'
   200     001F  3400               	retlw	0
   201     0020                     STR_7:
   202     0020  3431               	retlw	49	;'1'
   203     0021  343A               	retlw	58	;':'
   204     0022  3420               	retlw	32	;' '
   205     0023  3400               	retlw	0
   206     0024                     STR_9:
   207     0024  3432               	retlw	50	;'2'
   208     0025  343A               	retlw	58	;':'
   209     0026  3420               	retlw	32	;' '
   210     0027  3400               	retlw	0
   211     0028                     STR_8:
   212     0028  3443               	retlw	67	;'C'
   213     0029  3400               	retlw	0
   214     0028                     
   215                           	psect	cinit
   216     07F6                     start_initialization:	
   217                           ; #config settings
   218                           
   219     07F6                     __initialization:
   220                           
   221                           ; Clear objects allocated to BANK0
   222     07F6  1283               	bcf	3,5	;RP0=0, select bank0
   223     07F7  1303               	bcf	3,6	;RP1=0, select bank0
   224     07F8  01BF               	clrf	__pbssBANK0& (0+127)
   225     07F9  01C0               	clrf	(__pbssBANK0+1)& (0+127)
   226     07FA  01C1               	clrf	(__pbssBANK0+2)& (0+127)
   227     07FB  01C2               	clrf	(__pbssBANK0+3)& (0+127)
   228     07FC  01C3               	clrf	(__pbssBANK0+4)& (0+127)
   229     07FD  01C4               	clrf	(__pbssBANK0+5)& (0+127)
   230     07FE                     end_of_initialization:	
   231                           ;End of C runtime variable initialization code
   232                           
   233     07FE                     __end_of__initialization:
   234     07FE  0183               	clrf	3
   235     07FF  29B3               	ljmp	_main	;jump to C main() function
   236                           
   237                           	psect	bssBANK0
   238     003F                     __pbssBANK0:
   239     003F                     mV2Celcius@tempStr:
   240     003F                     	ds	6
   241                           
   242                           	psect	cstackCOMMON
   243     0070                     __pcstackCOMMON:
   244     0070                     ?_IOInit:
   245     0070                     ??_IOInit:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ?_TimerInit:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     0070                     ??_TimerInit:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     0070                     ?_wait:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     0070                     ?_CommandLCD:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     0070                     ?_writeChar:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     0070                     ??_writeChar:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     0070                     ?_readMessage:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     0070                     ?_checkSignal:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     0070                     ?_staticInfo:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0070                     ?_main:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     0070                     ?___wmul:	
   279                           ; 1 bytes @ 0x0
   280                           
   281     0070                     ?___awdiv:	
   282                           ; 2 bytes @ 0x0
   283                           
   284     0070                     ?___awmod:	
   285                           ; 2 bytes @ 0x0
   286                           
   287     0070                     writeChar@character:	
   288                           ; 2 bytes @ 0x0
   289                           
   290     0070                     wait@time:	
   291                           ; 1 bytes @ 0x0
   292                           
   293     0070                     ___wmul@multiplier:	
   294                           ; 2 bytes @ 0x0
   295                           
   296     0070                     ___awdiv@divisor:	
   297                           ; 2 bytes @ 0x0
   298                           
   299     0070                     ___awmod@divisor:	
   300                           ; 2 bytes @ 0x0
   301                           
   302                           
   303                           ; 2 bytes @ 0x0
   304     0070                     	ds	1
   305     0071                     ?_writeString:
   306     0071                     writeString@string:	
   307                           ; 1 bytes @ 0x1
   308                           
   309                           
   310                           ; 2 bytes @ 0x1
   311     0071                     	ds	1
   312     0072                     ??_wait:
   313     0072                     wait@t:	
   314                           ; 1 bytes @ 0x2
   315                           
   316     0072                     ___wmul@multiplicand:	
   317                           ; 2 bytes @ 0x2
   318                           
   319     0072                     ___awdiv@dividend:	
   320                           ; 2 bytes @ 0x2
   321                           
   322     0072                     ___awmod@dividend:	
   323                           ; 2 bytes @ 0x2
   324                           
   325                           
   326                           ; 2 bytes @ 0x2
   327     0072                     	ds	1
   328     0073                     writeString@length:
   329                           
   330                           ; 1 bytes @ 0x3
   331     0073                     	ds	1
   332     0074                     ??_CommandLCD:
   333     0074                     ??_writeString:	
   334                           ; 1 bytes @ 0x4
   335                           
   336     0074                     ??_checkSignal:	
   337                           ; 1 bytes @ 0x4
   338                           
   339     0074                     ??___wmul:	
   340                           ; 1 bytes @ 0x4
   341                           
   342     0074                     ??___awdiv:	
   343                           ; 1 bytes @ 0x4
   344                           
   345     0074                     ??___awmod:	
   346                           ; 1 bytes @ 0x4
   347                           
   348     0074                     CommandLCD@command:	
   349                           ; 1 bytes @ 0x4
   350                           
   351     0074                     writeString@i:	
   352                           ; 1 bytes @ 0x4
   353                           
   354     0074                     ___awdiv@counter:	
   355                           ; 1 bytes @ 0x4
   356                           
   357     0074                     ___awmod@counter:	
   358                           ; 1 bytes @ 0x4
   359                           
   360     0074                     checkSignal@i:	
   361                           ; 1 bytes @ 0x4
   362                           
   363     0074                     ___wmul@product:	
   364                           ; 2 bytes @ 0x4
   365                           
   366                           
   367                           ; 2 bytes @ 0x4
   368     0074                     	ds	1
   369     0075                     ??_staticInfo:
   370     0075                     ___awdiv@sign:	
   371                           ; 1 bytes @ 0x5
   372                           
   373     0075                     ___awmod@sign:	
   374                           ; 1 bytes @ 0x5
   375                           
   376                           
   377                           ; 1 bytes @ 0x5
   378     0075                     	ds	1
   379     0076                     checkSignal@i_109:
   380     0076                     ___awdiv@quotient:	
   381                           ; 2 bytes @ 0x6
   382                           
   383                           
   384                           ; 2 bytes @ 0x6
   385     0076                     	ds	2
   386     0078                     ?_mV2Celcius:
   387     0078                     mV2Celcius@inputValue:	
   388                           ; 1 bytes @ 0x8
   389                           
   390     0078                     checkSignal@i_110:	
   391                           ; 2 bytes @ 0x8
   392                           
   393                           
   394                           ; 2 bytes @ 0x8
   395     0078                     	ds	2
   396     007A                     ??_mV2Celcius:
   397     007A                     ??_updateLCD:	
   398                           ; 1 bytes @ 0xA
   399                           
   400     007A                     updateLCD@tempStr:	
   401                           ; 1 bytes @ 0xA
   402                           
   403     007A                     checkSignal@j:	
   404                           ; 1 bytes @ 0xA
   405                           
   406                           
   407                           ; 2 bytes @ 0xA
   408     007A                     	ds	1
   409     007B                     updateLCD@tempStr_93:
   410                           
   411                           ; 1 bytes @ 0xB
   412     007B                     	ds	1
   413     007C                     ??_main:
   414                           
   415                           	psect	cstackBANK0
   416     0020                     __pcstackBANK0:	
   417                           ; 1 bytes @ 0xC
   418                           
   419     0020                     mV2Celcius@milivolts:
   420                           
   421                           ; 2 bytes @ 0x0
   422     0020                     	ds	2
   423     0022                     mV2Celcius@decPart:
   424                           
   425                           ; 2 bytes @ 0x2
   426     0022                     	ds	2
   427     0024                     mV2Celcius@intPart:
   428                           
   429                           ; 2 bytes @ 0x4
   430     0024                     	ds	2
   431     0026                     mV2Celcius@totalC:
   432                           
   433                           ; 2 bytes @ 0x6
   434     0026                     	ds	2
   435     0028                     ?_updateLCD:
   436     0028                     updateLCD@value:	
   437                           ; 1 bytes @ 0x8
   438                           
   439                           
   440                           ; 2 bytes @ 0x8
   441     0028                     	ds	2
   442     002A                     updateLCD@line:
   443                           
   444                           ; 1 bytes @ 0xA
   445     002A                     	ds	1
   446     002B                     updateLCD@batStatus:
   447                           
   448                           ; 1 bytes @ 0xB
   449     002B                     	ds	1
   450     002C                     updateLCD@error:
   451                           
   452                           ; 1 bytes @ 0xC
   453     002C                     	ds	1
   454     002D                     ??_readMessage:
   455                           
   456                           ; 1 bytes @ 0xD
   457     002D                     	ds	7
   458     0034                     readMessage@Error_state:
   459                           
   460                           ; 1 bytes @ 0x14
   461     0034                     	ds	1
   462     0035                     readMessage@Batt:
   463                           
   464                           ; 1 bytes @ 0x15
   465     0035                     	ds	1
   466     0036                     readMessage@Termometer_id:
   467                           
   468                           ; 2 bytes @ 0x16
   469     0036                     	ds	2
   470     0038                     readMessage@Expected_check_bit:
   471                           
   472                           ; 1 bytes @ 0x18
   473     0038                     	ds	1
   474     0039                     readMessage@Batt_status:
   475                           
   476                           ; 2 bytes @ 0x19
   477     0039                     	ds	2
   478     003B                     readMessage@temp:
   479                           
   480                           ; 2 bytes @ 0x1B
   481     003B                     	ds	2
   482     003D                     readMessage@temp_data:
   483                           
   484                           ; 2 bytes @ 0x1D
   485     003D                     	ds	2
   486                           
   487                           	psect	maintext
   488     01B3                     __pmaintext:	
   489 ;;
   490 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   491 ;;
   492 ;; *************** function _main *****************
   493 ;; Defined at:
   494 ;;		line 350 in file "JordTermometerStyreBox.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;		None
   497 ;; Auto vars:     Size  Location     Type
   498 ;;		None
   499 ;; Return value:  Size  Location     Type
   500 ;;                  1    wreg      void 
   501 ;; Registers used:
   502 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   503 ;; Tracked objects:
   504 ;;		On entry : B00/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   508 ;;      Params:         0       0       0       0
   509 ;;      Locals:         0       0       0       0
   510 ;;      Temps:          0       0       0       0
   511 ;;      Totals:         0       0       0       0
   512 ;;Total ram usage:        0 bytes
   513 ;; Hardware stack levels required when called: 4
   514 ;; This function calls:
   515 ;;		_CommandLCD
   516 ;;		_IOInit
   517 ;;		_TimerInit
   518 ;;		_checkSignal
   519 ;;		_readMessage
   520 ;;		_staticInfo
   521 ;;		_wait
   522 ;; This function is called by:
   523 ;;		Startup code after reset
   524 ;; This function uses a non-reentrant model
   525 ;;
   526                           
   527     01B3                     _main:	
   528                           ;psect for function _main
   529                           
   530     01B3                     l1549:	
   531                           ;incstack = 0
   532                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   533                           
   534                           
   535                           ;JordTermometerStyreBox.c: 352:     IOInit();
   536     01B3  217B               	fcall	_IOInit
   537                           
   538                           ;JordTermometerStyreBox.c: 353:     TimerInit();
   539     01B4  216A               	fcall	_TimerInit
   540                           
   541                           ;JordTermometerStyreBox.c: 355:     wait(100);
   542     01B5  3064               	movlw	100
   543     01B6  00F0               	movwf	wait@time
   544     01B7  3000               	movlw	0
   545     01B8  00F1               	movwf	wait@time+1
   546     01B9  2189               	fcall	_wait
   547                           
   548                           ;JordTermometerStyreBox.c: 358:     CommandLCD(0b00111000);
   549     01BA  3038               	movlw	56
   550     01BB  21F6               	fcall	_CommandLCD
   551                           
   552                           ;JordTermometerStyreBox.c: 359:     CommandLCD(0b00001110);
   553     01BC  300E               	movlw	14
   554     01BD  21F6               	fcall	_CommandLCD
   555                           
   556                           ;JordTermometerStyreBox.c: 360:     CommandLCD(0b00000001);
   557     01BE  3001               	movlw	1
   558     01BF  21F6               	fcall	_CommandLCD
   559                           
   560                           ;JordTermometerStyreBox.c: 361:     CommandLCD(0b00000110);
   561     01C0  3006               	movlw	6
   562     01C1  21F6               	fcall	_CommandLCD
   563                           
   564                           ;JordTermometerStyreBox.c: 363:     wait(200);
   565     01C2  30C8               	movlw	200
   566     01C3  00F0               	movwf	wait@time
   567     01C4  3000               	movlw	0
   568     01C5  00F1               	movwf	wait@time+1
   569     01C6  2189               	fcall	_wait
   570     01C7                     l1551:
   571                           
   572                           ;JordTermometerStyreBox.c: 365:     staticInfo();
   573     01C7  221C               	fcall	_staticInfo
   574     01C8                     l1553:
   575                           
   576                           ;JordTermometerStyreBox.c: 368:         if (checkSignal()) {
   577     01C8  23DE               	fcall	_checkSignal
   578     01C9  3A00               	xorlw	0
   579     01CA  1903               	skipnz
   580     01CB  29CD               	goto	u1041
   581     01CC  29CE               	goto	u1040
   582     01CD                     u1041:
   583     01CD  29C8               	goto	l1553
   584     01CE                     u1040:
   585     01CE                     l1555:
   586                           
   587                           ;JordTermometerStyreBox.c: 369:             readMessage();
   588     01CE  2491               	fcall	_readMessage
   589     01CF  29C8               	goto	l1553
   590     01D0  2800               	ljmp	start
   591     01D1                     __end_of_main:
   592                           
   593                           	psect	text1
   594     021C                     __ptext1:	
   595 ;; *************** function _staticInfo *****************
   596 ;; Defined at:
   597 ;;		line 332 in file "JordTermometerStyreBox.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;		None
   602 ;; Return value:  Size  Location     Type
   603 ;;                  1    wreg      void 
   604 ;; Registers used:
   605 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   611 ;;      Params:         0       0       0       0
   612 ;;      Locals:         0       0       0       0
   613 ;;      Temps:          0       0       0       0
   614 ;;      Totals:         0       0       0       0
   615 ;;Total ram usage:        0 bytes
   616 ;; Hardware stack levels used: 1
   617 ;; Hardware stack levels required when called: 2
   618 ;; This function calls:
   619 ;;		_CommandLCD
   620 ;;		_writeChar
   621 ;;		_writeString
   622 ;; This function is called by:
   623 ;;		_main
   624 ;; This function uses a non-reentrant model
   625 ;;
   626                           
   627     021C                     _staticInfo:	
   628                           ;psect for function _staticInfo
   629                           
   630     021C                     l1537:	
   631                           ;incstack = 0
   632                           ; Regs used in _staticInfo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   633                           
   634                           
   635                           ;JordTermometerStyreBox.c: 333:     writeString("1: ", 3);
   636     021C  3010               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   637     021D  00F1               	movwf	writeString@string
   638     021E  3080               	movlw	128
   639     021F  00F2               	movwf	writeString@string+1
   640     0220  3003               	movlw	3
   641     0221  00F3               	movwf	writeString@length
   642     0222  219B               	fcall	_writeString
   643     0223                     l1539:
   644                           
   645                           ;JordTermometerStyreBox.c: 335:     CommandLCD(0b10001000);
   646     0223  3088               	movlw	136
   647     0224  21F6               	fcall	_CommandLCD
   648     0225                     l1541:
   649                           
   650                           ;JordTermometerStyreBox.c: 336:     writeChar(0b11011111);
   651     0225  30DF               	movlw	223
   652     0226  216F               	fcall	_writeChar
   653                           
   654                           ;JordTermometerStyreBox.c: 338:     writeString("C", 1);
   655     0227  3018               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   656     0228  00F1               	movwf	writeString@string
   657     0229  3080               	movlw	128
   658     022A  00F2               	movwf	writeString@string+1
   659     022B  01F3               	clrf	writeString@length
   660     022C  0AF3               	incf	writeString@length,f
   661     022D  219B               	fcall	_writeString
   662     022E                     l1543:
   663                           
   664                           ;JordTermometerStyreBox.c: 340:     CommandLCD(0b11000000);
   665     022E  30C0               	movlw	192
   666     022F  21F6               	fcall	_CommandLCD
   667     0230                     l1545:
   668                           
   669                           ;JordTermometerStyreBox.c: 342:     writeString("2: ", 3);
   670     0230  3014               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
   671     0231  00F1               	movwf	writeString@string
   672     0232  3080               	movlw	128
   673     0233  00F2               	movwf	writeString@string+1
   674     0234  3003               	movlw	3
   675     0235  00F3               	movwf	writeString@length
   676     0236  219B               	fcall	_writeString
   677                           
   678                           ;JordTermometerStyreBox.c: 344:     CommandLCD(0b11001000);
   679     0237  30C8               	movlw	200
   680     0238  21F6               	fcall	_CommandLCD
   681                           
   682                           ;JordTermometerStyreBox.c: 345:     writeChar(0b11011111);
   683     0239  30DF               	movlw	223
   684     023A  216F               	fcall	_writeChar
   685     023B                     l1547:
   686                           
   687                           ;JordTermometerStyreBox.c: 346:     writeString("C", 1);
   688     023B  3018               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   689     023C  00F1               	movwf	writeString@string
   690     023D  3080               	movlw	128
   691     023E  00F2               	movwf	writeString@string+1
   692     023F  01F3               	clrf	writeString@length
   693     0240  0AF3               	incf	writeString@length,f
   694     0241  219B               	fcall	_writeString
   695     0242                     l102:
   696     0242  0008               	return
   697     0243                     __end_of_staticInfo:
   698                           
   699                           	psect	text2
   700     0491                     __ptext2:	
   701 ;; *************** function _readMessage *****************
   702 ;; Defined at:
   703 ;;		line 162 in file "JordTermometerStyreBox.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;		None
   706 ;; Auto vars:     Size  Location     Type
   707 ;;  temp_data       2   29[BANK0 ] unsigned short 
   708 ;;  temp            2   27[BANK0 ] unsigned int 
   709 ;;  Batt_status     2   25[BANK0 ] short 
   710 ;;  Termometer_i    2   22[BANK0 ] short 
   711 ;;  Expected_che    1   24[BANK0 ] unsigned char 
   712 ;;  Batt            1   21[BANK0 ] unsigned char 
   713 ;;  Error_state     1   20[BANK0 ] unsigned char 
   714 ;; Return value:  Size  Location     Type
   715 ;;                  1    wreg      void 
   716 ;; Registers used:
   717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   718 ;; Tracked objects:
   719 ;;		On entry : 0/0
   720 ;;		On exit  : 0/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   723 ;;      Params:         0       0       0       0
   724 ;;      Locals:         0      11       0       0
   725 ;;      Temps:          0       7       0       0
   726 ;;      Totals:         0      18       0       0
   727 ;;Total ram usage:       18 bytes
   728 ;; Hardware stack levels used: 1
   729 ;; Hardware stack levels required when called: 3
   730 ;; This function calls:
   731 ;;		___wmul
   732 ;;		_updateLCD
   733 ;;		_wait
   734 ;; This function is called by:
   735 ;;		_main
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739     0491                     _readMessage:	
   740                           ;psect for function _readMessage
   741                           
   742     0491                     l1321:	
   743                           ;incstack = 0
   744                           ; Regs used in _readMessage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   745                           
   746                           
   747                           ;JordTermometerStyreBox.c: 164:     short int Termometer_id = 0;
   748     0491  1283               	bcf	3,5	;RP0=0, select bank0
   749     0492  1303               	bcf	3,6	;RP1=0, select bank0
   750     0493  01B6               	clrf	readMessage@Termometer_id
   751     0494  01B7               	clrf	readMessage@Termometer_id+1
   752                           
   753                           ;JordTermometerStyreBox.c: 165:     unsigned short int temp_data = 0;
   754     0495  01BD               	clrf	readMessage@temp_data
   755     0496  01BE               	clrf	readMessage@temp_data+1
   756                           
   757                           ;JordTermometerStyreBox.c: 166:     short int Batt_status = 0;
   758     0497  01B9               	clrf	readMessage@Batt_status
   759     0498  01BA               	clrf	readMessage@Batt_status+1
   760                           
   761                           ;JordTermometerStyreBox.c: 167:     char Expected_check_bit = 0;
   762     0499  01B8               	clrf	readMessage@Expected_check_bit
   763     049A                     l1323:
   764                           
   765                           ;JordTermometerStyreBox.c: 169:     wait(5);
   766     049A  3005               	movlw	5
   767     049B  00F0               	movwf	wait@time
   768     049C  3000               	movlw	0
   769     049D  00F1               	movwf	wait@time+1
   770     049E  2189               	fcall	_wait
   771     049F                     l1325:
   772                           
   773                           ;JordTermometerStyreBox.c: 170:     Expected_check_bit ^= PORTAbits.RA3;
   774     049F  1283               	bcf	3,5	;RP0=0, select bank0
   775     04A0  1303               	bcf	3,6	;RP1=0, select bank0
   776     04A1  0C05               	rrf	5,w	;volatile
   777     04A2  00AD               	movwf	??_readMessage
   778     04A3  0CAD               	rrf	??_readMessage,f
   779     04A4  0C2D               	rrf	??_readMessage,w
   780     04A5  3901               	andlw	1
   781     04A6  00FF               	movwf	btemp+1
   782     04A7  087F               	movf	btemp+1,w
   783     04A8  06B8               	xorwf	readMessage@Expected_check_bit,f
   784     04A9                     l1327:
   785                           
   786                           ;JordTermometerStyreBox.c: 171:     Termometer_id = (Termometer_id << 1) | PORTAbits.RA3
      +                          ;
   787     04A9  0C05               	rrf	5,w	;volatile
   788     04AA  00AD               	movwf	??_readMessage
   789     04AB  0CAD               	rrf	??_readMessage,f
   790     04AC  0C2D               	rrf	??_readMessage,w
   791     04AD  3901               	andlw	1
   792     04AE  00AE               	movwf	??_readMessage+1
   793     04AF  01AF               	clrf	??_readMessage+2
   794     04B0  0837               	movf	readMessage@Termometer_id+1,w
   795     04B1  00B1               	movwf	??_readMessage+4
   796     04B2  0836               	movf	readMessage@Termometer_id,w
   797     04B3  00B0               	movwf	??_readMessage+3
   798     04B4  1003               	clrc
   799     04B5  0DB0               	rlf	??_readMessage+3,f
   800     04B6  0DB1               	rlf	??_readMessage+4,f
   801     04B7  082E               	movf	??_readMessage+1,w
   802     04B8  0430               	iorwf	??_readMessage+3,w
   803     04B9  00B2               	movwf	??_readMessage+5
   804     04BA  082F               	movf	??_readMessage+2,w
   805     04BB  0431               	iorwf	??_readMessage+4,w
   806     04BC  00B3               	movwf	??_readMessage+6
   807     04BD  0832               	movf	??_readMessage+5,w
   808     04BE  00B6               	movwf	readMessage@Termometer_id
   809     04BF  0833               	movf	??_readMessage+6,w
   810     04C0  00B7               	movwf	readMessage@Termometer_id+1
   811     04C1                     l1329:
   812                           
   813                           ;JordTermometerStyreBox.c: 172:     PORTAbits.RA4 = 1;
   814     04C1  1605               	bsf	5,4	;volatile
   815     04C2                     l1331:
   816                           
   817                           ;JordTermometerStyreBox.c: 174:     wait(10);
   818     04C2  300A               	movlw	10
   819     04C3  00F0               	movwf	wait@time
   820     04C4  3000               	movlw	0
   821     04C5  00F1               	movwf	wait@time+1
   822     04C6  2189               	fcall	_wait
   823     04C7                     l1333:
   824                           
   825                           ;JordTermometerStyreBox.c: 175:     Expected_check_bit ^= PORTAbits.RA3;
   826     04C7  1283               	bcf	3,5	;RP0=0, select bank0
   827     04C8  1303               	bcf	3,6	;RP1=0, select bank0
   828     04C9  0C05               	rrf	5,w	;volatile
   829     04CA  00AD               	movwf	??_readMessage
   830     04CB  0CAD               	rrf	??_readMessage,f
   831     04CC  0C2D               	rrf	??_readMessage,w
   832     04CD  3901               	andlw	1
   833     04CE  00FF               	movwf	btemp+1
   834     04CF  087F               	movf	btemp+1,w
   835     04D0  06B8               	xorwf	readMessage@Expected_check_bit,f
   836     04D1                     l1335:
   837                           
   838                           ;JordTermometerStyreBox.c: 176:     Termometer_id = (Termometer_id << 1) | PORTAbits.RA3
      +                          ;
   839     04D1  0C05               	rrf	5,w	;volatile
   840     04D2  00AD               	movwf	??_readMessage
   841     04D3  0CAD               	rrf	??_readMessage,f
   842     04D4  0C2D               	rrf	??_readMessage,w
   843     04D5  3901               	andlw	1
   844     04D6  00AE               	movwf	??_readMessage+1
   845     04D7  01AF               	clrf	??_readMessage+2
   846     04D8  0837               	movf	readMessage@Termometer_id+1,w
   847     04D9  00B1               	movwf	??_readMessage+4
   848     04DA  0836               	movf	readMessage@Termometer_id,w
   849     04DB  00B0               	movwf	??_readMessage+3
   850     04DC  1003               	clrc
   851     04DD  0DB0               	rlf	??_readMessage+3,f
   852     04DE  0DB1               	rlf	??_readMessage+4,f
   853     04DF  082E               	movf	??_readMessage+1,w
   854     04E0  0430               	iorwf	??_readMessage+3,w
   855     04E1  00B2               	movwf	??_readMessage+5
   856     04E2  082F               	movf	??_readMessage+2,w
   857     04E3  0431               	iorwf	??_readMessage+4,w
   858     04E4  00B3               	movwf	??_readMessage+6
   859     04E5  0832               	movf	??_readMessage+5,w
   860     04E6  00B6               	movwf	readMessage@Termometer_id
   861     04E7  0833               	movf	??_readMessage+6,w
   862     04E8  00B7               	movwf	readMessage@Termometer_id+1
   863     04E9                     l1337:
   864                           
   865                           ;JordTermometerStyreBox.c: 177:     PORTAbits.RA4 = 0;
   866     04E9  1205               	bcf	5,4	;volatile
   867     04EA                     l1339:
   868                           
   869                           ;JordTermometerStyreBox.c: 179:     wait(13);
   870     04EA  300D               	movlw	13
   871     04EB  00F0               	movwf	wait@time
   872     04EC  3000               	movlw	0
   873     04ED  00F1               	movwf	wait@time+1
   874     04EE  2189               	fcall	_wait
   875     04EF                     l1341:
   876                           
   877                           ;JordTermometerStyreBox.c: 180:     Expected_check_bit ^= PORTAbits.RA3;
   878     04EF  1283               	bcf	3,5	;RP0=0, select bank0
   879     04F0  1303               	bcf	3,6	;RP1=0, select bank0
   880     04F1  0C05               	rrf	5,w	;volatile
   881     04F2  00AD               	movwf	??_readMessage
   882     04F3  0CAD               	rrf	??_readMessage,f
   883     04F4  0C2D               	rrf	??_readMessage,w
   884     04F5  3901               	andlw	1
   885     04F6  00FF               	movwf	btemp+1
   886     04F7  087F               	movf	btemp+1,w
   887     04F8  06B8               	xorwf	readMessage@Expected_check_bit,f
   888     04F9                     l1343:
   889                           
   890                           ;JordTermometerStyreBox.c: 181:     Termometer_id = (Termometer_id << 1) | PORTAbits.RA3
      +                          ;
   891     04F9  0C05               	rrf	5,w	;volatile
   892     04FA  00AD               	movwf	??_readMessage
   893     04FB  0CAD               	rrf	??_readMessage,f
   894     04FC  0C2D               	rrf	??_readMessage,w
   895     04FD  3901               	andlw	1
   896     04FE  00AE               	movwf	??_readMessage+1
   897     04FF  01AF               	clrf	??_readMessage+2
   898     0500  0837               	movf	readMessage@Termometer_id+1,w
   899     0501  00B1               	movwf	??_readMessage+4
   900     0502  0836               	movf	readMessage@Termometer_id,w
   901     0503  00B0               	movwf	??_readMessage+3
   902     0504  1003               	clrc
   903     0505  0DB0               	rlf	??_readMessage+3,f
   904     0506  0DB1               	rlf	??_readMessage+4,f
   905     0507  082E               	movf	??_readMessage+1,w
   906     0508  0430               	iorwf	??_readMessage+3,w
   907     0509  00B2               	movwf	??_readMessage+5
   908     050A  082F               	movf	??_readMessage+2,w
   909     050B  0431               	iorwf	??_readMessage+4,w
   910     050C  00B3               	movwf	??_readMessage+6
   911     050D  0832               	movf	??_readMessage+5,w
   912     050E  00B6               	movwf	readMessage@Termometer_id
   913     050F  0833               	movf	??_readMessage+6,w
   914     0510  00B7               	movwf	readMessage@Termometer_id+1
   915     0511                     l1345:
   916                           
   917                           ;JordTermometerStyreBox.c: 182:     PORTAbits.RA4 = 1;
   918     0511  1605               	bsf	5,4	;volatile
   919     0512                     l1347:
   920                           
   921                           ;JordTermometerStyreBox.c: 184:     wait(13);
   922     0512  300D               	movlw	13
   923     0513  00F0               	movwf	wait@time
   924     0514  3000               	movlw	0
   925     0515  00F1               	movwf	wait@time+1
   926     0516  2189               	fcall	_wait
   927     0517                     l62:	
   928                           ;JordTermometerStyreBox.c: 185:     while(!PORTAbits.RA3) {}
   929                           
   930     0517  1283               	bcf	3,5	;RP0=0, select bank0
   931     0518  1303               	bcf	3,6	;RP1=0, select bank0
   932     0519  1D85               	btfss	5,3	;volatile
   933     051A  2D1C               	goto	u851
   934     051B  2D1D               	goto	u850
   935     051C                     u851:
   936     051C  2D17               	goto	l62
   937     051D                     u850:
   938     051D                     l1349:
   939                           
   940                           ;JordTermometerStyreBox.c: 187:     wait(18);
   941     051D  3012               	movlw	18
   942     051E  00F0               	movwf	wait@time
   943     051F  3000               	movlw	0
   944     0520  00F1               	movwf	wait@time+1
   945     0521  2189               	fcall	_wait
   946     0522                     l1351:
   947                           
   948                           ;JordTermometerStyreBox.c: 190:     Expected_check_bit ^= PORTAbits.RA3;
   949     0522  1283               	bcf	3,5	;RP0=0, select bank0
   950     0523  1303               	bcf	3,6	;RP1=0, select bank0
   951     0524  0C05               	rrf	5,w	;volatile
   952     0525  00AD               	movwf	??_readMessage
   953     0526  0CAD               	rrf	??_readMessage,f
   954     0527  0C2D               	rrf	??_readMessage,w
   955     0528  3901               	andlw	1
   956     0529  00FF               	movwf	btemp+1
   957     052A  087F               	movf	btemp+1,w
   958     052B  06B8               	xorwf	readMessage@Expected_check_bit,f
   959     052C                     l1353:
   960                           
   961                           ;JordTermometerStyreBox.c: 191:     temp_data = (temp_data << 1) | PORTAbits.RA3;
   962     052C  0C05               	rrf	5,w	;volatile
   963     052D  00AD               	movwf	??_readMessage
   964     052E  0CAD               	rrf	??_readMessage,f
   965     052F  0C2D               	rrf	??_readMessage,w
   966     0530  3901               	andlw	1
   967     0531  00AE               	movwf	??_readMessage+1
   968     0532  01AF               	clrf	??_readMessage+2
   969     0533  083E               	movf	readMessage@temp_data+1,w
   970     0534  00B1               	movwf	??_readMessage+4
   971     0535  083D               	movf	readMessage@temp_data,w
   972     0536  00B0               	movwf	??_readMessage+3
   973     0537  1003               	clrc
   974     0538  0DB0               	rlf	??_readMessage+3,f
   975     0539  0DB1               	rlf	??_readMessage+4,f
   976     053A  082E               	movf	??_readMessage+1,w
   977     053B  0430               	iorwf	??_readMessage+3,w
   978     053C  00B2               	movwf	??_readMessage+5
   979     053D  082F               	movf	??_readMessage+2,w
   980     053E  0431               	iorwf	??_readMessage+4,w
   981     053F  00B3               	movwf	??_readMessage+6
   982     0540  0832               	movf	??_readMessage+5,w
   983     0541  00BD               	movwf	readMessage@temp_data
   984     0542  0833               	movf	??_readMessage+6,w
   985     0543  00BE               	movwf	readMessage@temp_data+1
   986     0544                     l1355:
   987                           
   988                           ;JordTermometerStyreBox.c: 192:     PORTAbits.RA4 = 0;
   989     0544  1205               	bcf	5,4	;volatile
   990     0545                     l1357:
   991                           
   992                           ;JordTermometerStyreBox.c: 194:     wait(13);
   993     0545  300D               	movlw	13
   994     0546  00F0               	movwf	wait@time
   995     0547  3000               	movlw	0
   996     0548  00F1               	movwf	wait@time+1
   997     0549  2189               	fcall	_wait
   998     054A                     l1359:
   999                           
  1000                           ;JordTermometerStyreBox.c: 195:     Expected_check_bit ^= PORTAbits.RA3;
  1001     054A  1283               	bcf	3,5	;RP0=0, select bank0
  1002     054B  1303               	bcf	3,6	;RP1=0, select bank0
  1003     054C  0C05               	rrf	5,w	;volatile
  1004     054D  00AD               	movwf	??_readMessage
  1005     054E  0CAD               	rrf	??_readMessage,f
  1006     054F  0C2D               	rrf	??_readMessage,w
  1007     0550  3901               	andlw	1
  1008     0551  00FF               	movwf	btemp+1
  1009     0552  087F               	movf	btemp+1,w
  1010     0553  06B8               	xorwf	readMessage@Expected_check_bit,f
  1011                           
  1012                           ;JordTermometerStyreBox.c: 196:     temp_data = (temp_data << 1) | PORTAbits.RA3;
  1013     0554  0C05               	rrf	5,w	;volatile
  1014     0555  00AD               	movwf	??_readMessage
  1015     0556  0CAD               	rrf	??_readMessage,f
  1016     0557  0C2D               	rrf	??_readMessage,w
  1017     0558  3901               	andlw	1
  1018     0559  00AE               	movwf	??_readMessage+1
  1019     055A  01AF               	clrf	??_readMessage+2
  1020     055B  083E               	movf	readMessage@temp_data+1,w
  1021     055C  00B1               	movwf	??_readMessage+4
  1022     055D  083D               	movf	readMessage@temp_data,w
  1023     055E  00B0               	movwf	??_readMessage+3
  1024     055F  1003               	clrc
  1025     0560  0DB0               	rlf	??_readMessage+3,f
  1026     0561  0DB1               	rlf	??_readMessage+4,f
  1027     0562  082E               	movf	??_readMessage+1,w
  1028     0563  0430               	iorwf	??_readMessage+3,w
  1029     0564  00B2               	movwf	??_readMessage+5
  1030     0565  082F               	movf	??_readMessage+2,w
  1031     0566  0431               	iorwf	??_readMessage+4,w
  1032     0567  00B3               	movwf	??_readMessage+6
  1033     0568  0832               	movf	??_readMessage+5,w
  1034     0569  00BD               	movwf	readMessage@temp_data
  1035     056A  0833               	movf	??_readMessage+6,w
  1036     056B  00BE               	movwf	readMessage@temp_data+1
  1037     056C                     l1361:
  1038                           
  1039                           ;JordTermometerStyreBox.c: 197:     PORTAbits.RA4 = 1;
  1040     056C  1605               	bsf	5,4	;volatile
  1041     056D                     l1363:
  1042                           
  1043                           ;JordTermometerStyreBox.c: 199:     wait(13);
  1044     056D  300D               	movlw	13
  1045     056E  00F0               	movwf	wait@time
  1046     056F  3000               	movlw	0
  1047     0570  00F1               	movwf	wait@time+1
  1048     0571  2189               	fcall	_wait
  1049     0572                     l1365:
  1050                           
  1051                           ;JordTermometerStyreBox.c: 200:     Expected_check_bit ^= PORTAbits.RA3;
  1052     0572  1283               	bcf	3,5	;RP0=0, select bank0
  1053     0573  1303               	bcf	3,6	;RP1=0, select bank0
  1054     0574  0C05               	rrf	5,w	;volatile
  1055     0575  00AD               	movwf	??_readMessage
  1056     0576  0CAD               	rrf	??_readMessage,f
  1057     0577  0C2D               	rrf	??_readMessage,w
  1058     0578  3901               	andlw	1
  1059     0579  00FF               	movwf	btemp+1
  1060     057A  087F               	movf	btemp+1,w
  1061     057B  06B8               	xorwf	readMessage@Expected_check_bit,f
  1062     057C                     l1367:
  1063                           
  1064                           ;JordTermometerStyreBox.c: 201:     temp_data = (temp_data << 1) | PORTAbits.RA3;
  1065     057C  0C05               	rrf	5,w	;volatile
  1066     057D  00AD               	movwf	??_readMessage
  1067     057E  0CAD               	rrf	??_readMessage,f
  1068     057F  0C2D               	rrf	??_readMessage,w
  1069     0580  3901               	andlw	1
  1070     0581  00AE               	movwf	??_readMessage+1
  1071     0582  01AF               	clrf	??_readMessage+2
  1072     0583  083E               	movf	readMessage@temp_data+1,w
  1073     0584  00B1               	movwf	??_readMessage+4
  1074     0585  083D               	movf	readMessage@temp_data,w
  1075     0586  00B0               	movwf	??_readMessage+3
  1076     0587  1003               	clrc
  1077     0588  0DB0               	rlf	??_readMessage+3,f
  1078     0589  0DB1               	rlf	??_readMessage+4,f
  1079     058A  082E               	movf	??_readMessage+1,w
  1080     058B  0430               	iorwf	??_readMessage+3,w
  1081     058C  00B2               	movwf	??_readMessage+5
  1082     058D  082F               	movf	??_readMessage+2,w
  1083     058E  0431               	iorwf	??_readMessage+4,w
  1084     058F  00B3               	movwf	??_readMessage+6
  1085     0590  0832               	movf	??_readMessage+5,w
  1086     0591  00BD               	movwf	readMessage@temp_data
  1087     0592  0833               	movf	??_readMessage+6,w
  1088     0593  00BE               	movwf	readMessage@temp_data+1
  1089     0594                     l1369:
  1090                           
  1091                           ;JordTermometerStyreBox.c: 202:     PORTAbits.RA4 = 0;
  1092     0594  1205               	bcf	5,4	;volatile
  1093     0595                     l1371:
  1094                           
  1095                           ;JordTermometerStyreBox.c: 204:     wait(13);
  1096     0595  300D               	movlw	13
  1097     0596  00F0               	movwf	wait@time
  1098     0597  3000               	movlw	0
  1099     0598  00F1               	movwf	wait@time+1
  1100     0599  2189               	fcall	_wait
  1101                           
  1102                           ;JordTermometerStyreBox.c: 205:     Expected_check_bit ^= PORTAbits.RA3;
  1103     059A  1283               	bcf	3,5	;RP0=0, select bank0
  1104     059B  1303               	bcf	3,6	;RP1=0, select bank0
  1105     059C  0C05               	rrf	5,w	;volatile
  1106     059D  00AD               	movwf	??_readMessage
  1107     059E  0CAD               	rrf	??_readMessage,f
  1108     059F  0C2D               	rrf	??_readMessage,w
  1109     05A0  3901               	andlw	1
  1110     05A1  00FF               	movwf	btemp+1
  1111     05A2  087F               	movf	btemp+1,w
  1112     05A3  06B8               	xorwf	readMessage@Expected_check_bit,f
  1113     05A4                     l1373:
  1114                           
  1115                           ;JordTermometerStyreBox.c: 206:     temp_data = (temp_data << 1) | PORTAbits.RA3;
  1116     05A4  0C05               	rrf	5,w	;volatile
  1117     05A5  00AD               	movwf	??_readMessage
  1118     05A6  0CAD               	rrf	??_readMessage,f
  1119     05A7  0C2D               	rrf	??_readMessage,w
  1120     05A8  3901               	andlw	1
  1121     05A9  00AE               	movwf	??_readMessage+1
  1122     05AA  01AF               	clrf	??_readMessage+2
  1123     05AB  083E               	movf	readMessage@temp_data+1,w
  1124     05AC  00B1               	movwf	??_readMessage+4
  1125     05AD  083D               	movf	readMessage@temp_data,w
  1126     05AE  00B0               	movwf	??_readMessage+3
  1127     05AF  1003               	clrc
  1128     05B0  0DB0               	rlf	??_readMessage+3,f
  1129     05B1  0DB1               	rlf	??_readMessage+4,f
  1130     05B2  082E               	movf	??_readMessage+1,w
  1131     05B3  0430               	iorwf	??_readMessage+3,w
  1132     05B4  00B2               	movwf	??_readMessage+5
  1133     05B5  082F               	movf	??_readMessage+2,w
  1134     05B6  0431               	iorwf	??_readMessage+4,w
  1135     05B7  00B3               	movwf	??_readMessage+6
  1136     05B8  0832               	movf	??_readMessage+5,w
  1137     05B9  00BD               	movwf	readMessage@temp_data
  1138     05BA  0833               	movf	??_readMessage+6,w
  1139     05BB  00BE               	movwf	readMessage@temp_data+1
  1140     05BC                     l1375:
  1141                           
  1142                           ;JordTermometerStyreBox.c: 207:     PORTAbits.RA4 = 1;
  1143     05BC  1605               	bsf	5,4	;volatile
  1144     05BD                     l1377:
  1145                           
  1146                           ;JordTermometerStyreBox.c: 209:     wait(13);
  1147     05BD  300D               	movlw	13
  1148     05BE  00F0               	movwf	wait@time
  1149     05BF  3000               	movlw	0
  1150     05C0  00F1               	movwf	wait@time+1
  1151     05C1  2189               	fcall	_wait
  1152     05C2                     l1379:
  1153                           
  1154                           ;JordTermometerStyreBox.c: 210:     Expected_check_bit ^= PORTAbits.RA3;
  1155     05C2  1283               	bcf	3,5	;RP0=0, select bank0
  1156     05C3  1303               	bcf	3,6	;RP1=0, select bank0
  1157     05C4  0C05               	rrf	5,w	;volatile
  1158     05C5  00AD               	movwf	??_readMessage
  1159     05C6  0CAD               	rrf	??_readMessage,f
  1160     05C7  0C2D               	rrf	??_readMessage,w
  1161     05C8  3901               	andlw	1
  1162     05C9  00FF               	movwf	btemp+1
  1163     05CA  087F               	movf	btemp+1,w
  1164     05CB  06B8               	xorwf	readMessage@Expected_check_bit,f
  1165     05CC                     l1381:
  1166                           
  1167                           ;JordTermometerStyreBox.c: 211:     temp_data = (temp_data << 1) | PORTAbits.RA3;
  1168     05CC  0C05               	rrf	5,w	;volatile
  1169     05CD  00AD               	movwf	??_readMessage
  1170     05CE  0CAD               	rrf	??_readMessage,f
  1171     05CF  0C2D               	rrf	??_readMessage,w
  1172     05D0  3901               	andlw	1
  1173     05D1  00AE               	movwf	??_readMessage+1
  1174     05D2  01AF               	clrf	??_readMessage+2
  1175     05D3  083E               	movf	readMessage@temp_data+1,w
  1176     05D4  00B1               	movwf	??_readMessage+4
  1177     05D5  083D               	movf	readMessage@temp_data,w
  1178     05D6  00B0               	movwf	??_readMessage+3
  1179     05D7  1003               	clrc
  1180     05D8  0DB0               	rlf	??_readMessage+3,f
  1181     05D9  0DB1               	rlf	??_readMessage+4,f
  1182     05DA  082E               	movf	??_readMessage+1,w
  1183     05DB  0430               	iorwf	??_readMessage+3,w
  1184     05DC  00B2               	movwf	??_readMessage+5
  1185     05DD  082F               	movf	??_readMessage+2,w
  1186     05DE  0431               	iorwf	??_readMessage+4,w
  1187     05DF  00B3               	movwf	??_readMessage+6
  1188     05E0  0832               	movf	??_readMessage+5,w
  1189     05E1  00BD               	movwf	readMessage@temp_data
  1190     05E2  0833               	movf	??_readMessage+6,w
  1191     05E3  00BE               	movwf	readMessage@temp_data+1
  1192     05E4                     l1383:
  1193                           
  1194                           ;JordTermometerStyreBox.c: 212:     PORTAbits.RA4 = 0;
  1195     05E4  1205               	bcf	5,4	;volatile
  1196                           
  1197                           ;JordTermometerStyreBox.c: 214:     wait(13);
  1198     05E5  300D               	movlw	13
  1199     05E6  00F0               	movwf	wait@time
  1200     05E7  3000               	movlw	0
  1201     05E8  00F1               	movwf	wait@time+1
  1202     05E9  2189               	fcall	_wait
  1203     05EA                     l65:	
  1204                           ;JordTermometerStyreBox.c: 215:     while(!PORTAbits.RA3) {}
  1205                           
  1206     05EA  1283               	bcf	3,5	;RP0=0, select bank0
  1207     05EB  1303               	bcf	3,6	;RP1=0, select bank0
  1208     05EC  1D85               	btfss	5,3	;volatile
  1209     05ED  2DEF               	goto	u861
  1210     05EE  2DF0               	goto	u860
  1211     05EF                     u861:
  1212     05EF  2DEA               	goto	l65
  1213     05F0                     u860:
  1214     05F0                     l1385:
  1215                           
  1216                           ;JordTermometerStyreBox.c: 217:     wait(18);
  1217     05F0  3012               	movlw	18
  1218     05F1  00F0               	movwf	wait@time
  1219     05F2  3000               	movlw	0
  1220     05F3  00F1               	movwf	wait@time+1
  1221     05F4  2189               	fcall	_wait
  1222     05F5                     l1387:
  1223                           
  1224                           ;JordTermometerStyreBox.c: 220:     Expected_check_bit ^= PORTAbits.RA3;
  1225     05F5  1283               	bcf	3,5	;RP0=0, select bank0
  1226     05F6  1303               	bcf	3,6	;RP1=0, select bank0
  1227     05F7  0C05               	rrf	5,w	;volatile
  1228     05F8  00AD               	movwf	??_readMessage
  1229     05F9  0CAD               	rrf	??_readMessage,f
  1230     05FA  0C2D               	rrf	??_readMessage,w
  1231     05FB  3901               	andlw	1
  1232     05FC  00FF               	movwf	btemp+1
  1233     05FD  087F               	movf	btemp+1,w
  1234     05FE  06B8               	xorwf	readMessage@Expected_check_bit,f
  1235     05FF                     l1389:
  1236                           
  1237                           ;JordTermometerStyreBox.c: 221:     temp_data = (temp_data << 1) | PORTAbits.RA3;
  1238     05FF  0C05               	rrf	5,w	;volatile
  1239     0600  00AD               	movwf	??_readMessage
  1240     0601  0CAD               	rrf	??_readMessage,f
  1241     0602  0C2D               	rrf	??_readMessage,w
  1242     0603  3901               	andlw	1
  1243     0604  00AE               	movwf	??_readMessage+1
  1244     0605  01AF               	clrf	??_readMessage+2
  1245     0606  083E               	movf	readMessage@temp_data+1,w
  1246     0607  00B1               	movwf	??_readMessage+4
  1247     0608  083D               	movf	readMessage@temp_data,w
  1248     0609  00B0               	movwf	??_readMessage+3
  1249     060A  1003               	clrc
  1250     060B  0DB0               	rlf	??_readMessage+3,f
  1251     060C  0DB1               	rlf	??_readMessage+4,f
  1252     060D  082E               	movf	??_readMessage+1,w
  1253     060E  0430               	iorwf	??_readMessage+3,w
  1254     060F  00B2               	movwf	??_readMessage+5
  1255     0610  082F               	movf	??_readMessage+2,w
  1256     0611  0431               	iorwf	??_readMessage+4,w
  1257     0612  00B3               	movwf	??_readMessage+6
  1258     0613  0832               	movf	??_readMessage+5,w
  1259     0614  00BD               	movwf	readMessage@temp_data
  1260     0615  0833               	movf	??_readMessage+6,w
  1261     0616  00BE               	movwf	readMessage@temp_data+1
  1262     0617                     l1391:
  1263                           
  1264                           ;JordTermometerStyreBox.c: 222:     PORTAbits.RA4 = 1;
  1265     0617  1605               	bsf	5,4	;volatile
  1266     0618                     l1393:
  1267                           
  1268                           ;JordTermometerStyreBox.c: 224:     wait(13);
  1269     0618  300D               	movlw	13
  1270     0619  00F0               	movwf	wait@time
  1271     061A  3000               	movlw	0
  1272     061B  00F1               	movwf	wait@time+1
  1273     061C  2189               	fcall	_wait
  1274     061D                     l1395:
  1275                           
  1276                           ;JordTermometerStyreBox.c: 225:     Expected_check_bit ^= PORTAbits.RA3;
  1277     061D  1283               	bcf	3,5	;RP0=0, select bank0
  1278     061E  1303               	bcf	3,6	;RP1=0, select bank0
  1279     061F  0C05               	rrf	5,w	;volatile
  1280     0620  00AD               	movwf	??_readMessage
  1281     0621  0CAD               	rrf	??_readMessage,f
  1282     0622  0C2D               	rrf	??_readMessage,w
  1283     0623  3901               	andlw	1
  1284     0624  00FF               	movwf	btemp+1
  1285     0625  087F               	movf	btemp+1,w
  1286     0626  06B8               	xorwf	readMessage@Expected_check_bit,f
  1287                           
  1288                           ;JordTermometerStyreBox.c: 226:     temp_data = (temp_data << 1) | PORTAbits.RA3;
  1289     0627  0C05               	rrf	5,w	;volatile
  1290     0628  00AD               	movwf	??_readMessage
  1291     0629  0CAD               	rrf	??_readMessage,f
  1292     062A  0C2D               	rrf	??_readMessage,w
  1293     062B  3901               	andlw	1
  1294     062C  00AE               	movwf	??_readMessage+1
  1295     062D  01AF               	clrf	??_readMessage+2
  1296     062E  083E               	movf	readMessage@temp_data+1,w
  1297     062F  00B1               	movwf	??_readMessage+4
  1298     0630  083D               	movf	readMessage@temp_data,w
  1299     0631  00B0               	movwf	??_readMessage+3
  1300     0632  1003               	clrc
  1301     0633  0DB0               	rlf	??_readMessage+3,f
  1302     0634  0DB1               	rlf	??_readMessage+4,f
  1303     0635  082E               	movf	??_readMessage+1,w
  1304     0636  0430               	iorwf	??_readMessage+3,w
  1305     0637  00B2               	movwf	??_readMessage+5
  1306     0638  082F               	movf	??_readMessage+2,w
  1307     0639  0431               	iorwf	??_readMessage+4,w
  1308     063A  00B3               	movwf	??_readMessage+6
  1309     063B  0832               	movf	??_readMessage+5,w
  1310     063C  00BD               	movwf	readMessage@temp_data
  1311     063D  0833               	movf	??_readMessage+6,w
  1312     063E  00BE               	movwf	readMessage@temp_data+1
  1313     063F                     l1397:
  1314                           
  1315                           ;JordTermometerStyreBox.c: 227:     PORTAbits.RA4 = 0;
  1316     063F  1205               	bcf	5,4	;volatile
  1317     0640                     l1399:
  1318                           
  1319                           ;JordTermometerStyreBox.c: 229:     wait(13);
  1320     0640  300D               	movlw	13
  1321     0641  00F0               	movwf	wait@time
  1322     0642  3000               	movlw	0
  1323     0643  00F1               	movwf	wait@time+1
  1324     0644  2189               	fcall	_wait
  1325     0645                     l1401:
  1326                           
  1327                           ;JordTermometerStyreBox.c: 230:     Expected_check_bit ^= PORTAbits.RA3;
  1328     0645  1283               	bcf	3,5	;RP0=0, select bank0
  1329     0646  1303               	bcf	3,6	;RP1=0, select bank0
  1330     0647  0C05               	rrf	5,w	;volatile
  1331     0648  00AD               	movwf	??_readMessage
  1332     0649  0CAD               	rrf	??_readMessage,f
  1333     064A  0C2D               	rrf	??_readMessage,w
  1334     064B  3901               	andlw	1
  1335     064C  00FF               	movwf	btemp+1
  1336     064D  087F               	movf	btemp+1,w
  1337     064E  06B8               	xorwf	readMessage@Expected_check_bit,f
  1338     064F                     l1403:
  1339                           
  1340                           ;JordTermometerStyreBox.c: 231:     temp_data = (temp_data << 1) | PORTAbits.RA3;
  1341     064F  0C05               	rrf	5,w	;volatile
  1342     0650  00AD               	movwf	??_readMessage
  1343     0651  0CAD               	rrf	??_readMessage,f
  1344     0652  0C2D               	rrf	??_readMessage,w
  1345     0653  3901               	andlw	1
  1346     0654  00AE               	movwf	??_readMessage+1
  1347     0655  01AF               	clrf	??_readMessage+2
  1348     0656  083E               	movf	readMessage@temp_data+1,w
  1349     0657  00B1               	movwf	??_readMessage+4
  1350     0658  083D               	movf	readMessage@temp_data,w
  1351     0659  00B0               	movwf	??_readMessage+3
  1352     065A  1003               	clrc
  1353     065B  0DB0               	rlf	??_readMessage+3,f
  1354     065C  0DB1               	rlf	??_readMessage+4,f
  1355     065D  082E               	movf	??_readMessage+1,w
  1356     065E  0430               	iorwf	??_readMessage+3,w
  1357     065F  00B2               	movwf	??_readMessage+5
  1358     0660  082F               	movf	??_readMessage+2,w
  1359     0661  0431               	iorwf	??_readMessage+4,w
  1360     0662  00B3               	movwf	??_readMessage+6
  1361     0663  0832               	movf	??_readMessage+5,w
  1362     0664  00BD               	movwf	readMessage@temp_data
  1363     0665  0833               	movf	??_readMessage+6,w
  1364     0666  00BE               	movwf	readMessage@temp_data+1
  1365     0667                     l1405:
  1366                           
  1367                           ;JordTermometerStyreBox.c: 232:     PORTAbits.RA4 = 1;
  1368     0667  1605               	bsf	5,4	;volatile
  1369     0668                     l1407:
  1370                           
  1371                           ;JordTermometerStyreBox.c: 234:     wait(13);
  1372     0668  300D               	movlw	13
  1373     0669  00F0               	movwf	wait@time
  1374     066A  3000               	movlw	0
  1375     066B  00F1               	movwf	wait@time+1
  1376     066C  2189               	fcall	_wait
  1377                           
  1378                           ;JordTermometerStyreBox.c: 235:     Expected_check_bit ^= PORTAbits.RA3;
  1379     066D  1283               	bcf	3,5	;RP0=0, select bank0
  1380     066E  1303               	bcf	3,6	;RP1=0, select bank0
  1381     066F  0C05               	rrf	5,w	;volatile
  1382     0670  00AD               	movwf	??_readMessage
  1383     0671  0CAD               	rrf	??_readMessage,f
  1384     0672  0C2D               	rrf	??_readMessage,w
  1385     0673  3901               	andlw	1
  1386     0674  00FF               	movwf	btemp+1
  1387     0675  087F               	movf	btemp+1,w
  1388     0676  06B8               	xorwf	readMessage@Expected_check_bit,f
  1389     0677                     l1409:
  1390                           
  1391                           ;JordTermometerStyreBox.c: 236:     temp_data = (temp_data << 1) | PORTAbits.RA3;
  1392     0677  0C05               	rrf	5,w	;volatile
  1393     0678  00AD               	movwf	??_readMessage
  1394     0679  0CAD               	rrf	??_readMessage,f
  1395     067A  0C2D               	rrf	??_readMessage,w
  1396     067B  3901               	andlw	1
  1397     067C  00AE               	movwf	??_readMessage+1
  1398     067D  01AF               	clrf	??_readMessage+2
  1399     067E  083E               	movf	readMessage@temp_data+1,w
  1400     067F  00B1               	movwf	??_readMessage+4
  1401     0680  083D               	movf	readMessage@temp_data,w
  1402     0681  00B0               	movwf	??_readMessage+3
  1403     0682  1003               	clrc
  1404     0683  0DB0               	rlf	??_readMessage+3,f
  1405     0684  0DB1               	rlf	??_readMessage+4,f
  1406     0685  082E               	movf	??_readMessage+1,w
  1407     0686  0430               	iorwf	??_readMessage+3,w
  1408     0687  00B2               	movwf	??_readMessage+5
  1409     0688  082F               	movf	??_readMessage+2,w
  1410     0689  0431               	iorwf	??_readMessage+4,w
  1411     068A  00B3               	movwf	??_readMessage+6
  1412     068B  0832               	movf	??_readMessage+5,w
  1413     068C  00BD               	movwf	readMessage@temp_data
  1414     068D  0833               	movf	??_readMessage+6,w
  1415     068E  00BE               	movwf	readMessage@temp_data+1
  1416     068F                     l1411:
  1417                           
  1418                           ;JordTermometerStyreBox.c: 237:     PORTAbits.RA4 = 0;
  1419     068F  1205               	bcf	5,4	;volatile
  1420     0690                     l1413:
  1421                           
  1422                           ;JordTermometerStyreBox.c: 239:     wait(13);
  1423     0690  300D               	movlw	13
  1424     0691  00F0               	movwf	wait@time
  1425     0692  3000               	movlw	0
  1426     0693  00F1               	movwf	wait@time+1
  1427     0694  2189               	fcall	_wait
  1428     0695                     l1415:
  1429                           
  1430                           ;JordTermometerStyreBox.c: 240:     Expected_check_bit ^= PORTAbits.RA3;
  1431     0695  1283               	bcf	3,5	;RP0=0, select bank0
  1432     0696  1303               	bcf	3,6	;RP1=0, select bank0
  1433     0697  0C05               	rrf	5,w	;volatile
  1434     0698  00AD               	movwf	??_readMessage
  1435     0699  0CAD               	rrf	??_readMessage,f
  1436     069A  0C2D               	rrf	??_readMessage,w
  1437     069B  3901               	andlw	1
  1438     069C  00FF               	movwf	btemp+1
  1439     069D  087F               	movf	btemp+1,w
  1440     069E  06B8               	xorwf	readMessage@Expected_check_bit,f
  1441     069F                     l1417:
  1442                           
  1443                           ;JordTermometerStyreBox.c: 241:     temp_data = (temp_data << 1) | PORTAbits.RA3;
  1444     069F  0C05               	rrf	5,w	;volatile
  1445     06A0  00AD               	movwf	??_readMessage
  1446     06A1  0CAD               	rrf	??_readMessage,f
  1447     06A2  0C2D               	rrf	??_readMessage,w
  1448     06A3  3901               	andlw	1
  1449     06A4  00AE               	movwf	??_readMessage+1
  1450     06A5  01AF               	clrf	??_readMessage+2
  1451     06A6  083E               	movf	readMessage@temp_data+1,w
  1452     06A7  00B1               	movwf	??_readMessage+4
  1453     06A8  083D               	movf	readMessage@temp_data,w
  1454     06A9  00B0               	movwf	??_readMessage+3
  1455     06AA  1003               	clrc
  1456     06AB  0DB0               	rlf	??_readMessage+3,f
  1457     06AC  0DB1               	rlf	??_readMessage+4,f
  1458     06AD  082E               	movf	??_readMessage+1,w
  1459     06AE  0430               	iorwf	??_readMessage+3,w
  1460     06AF  00B2               	movwf	??_readMessage+5
  1461     06B0  082F               	movf	??_readMessage+2,w
  1462     06B1  0431               	iorwf	??_readMessage+4,w
  1463     06B2  00B3               	movwf	??_readMessage+6
  1464     06B3  0832               	movf	??_readMessage+5,w
  1465     06B4  00BD               	movwf	readMessage@temp_data
  1466     06B5  0833               	movf	??_readMessage+6,w
  1467     06B6  00BE               	movwf	readMessage@temp_data+1
  1468     06B7                     l1419:
  1469                           
  1470                           ;JordTermometerStyreBox.c: 242:     PORTAbits.RA4 = 1;
  1471     06B7  1605               	bsf	5,4	;volatile
  1472                           
  1473                           ;JordTermometerStyreBox.c: 244:     wait(13);
  1474     06B8  300D               	movlw	13
  1475     06B9  00F0               	movwf	wait@time
  1476     06BA  3000               	movlw	0
  1477     06BB  00F1               	movwf	wait@time+1
  1478     06BC  2189               	fcall	_wait
  1479     06BD                     l68:	
  1480                           ;JordTermometerStyreBox.c: 245:     while(!PORTAbits.RA3) {}
  1481                           
  1482     06BD  1283               	bcf	3,5	;RP0=0, select bank0
  1483     06BE  1303               	bcf	3,6	;RP1=0, select bank0
  1484     06BF  1D85               	btfss	5,3	;volatile
  1485     06C0  2EC2               	goto	u871
  1486     06C1  2EC3               	goto	u870
  1487     06C2                     u871:
  1488     06C2  2EBD               	goto	l68
  1489     06C3                     u870:
  1490     06C3                     l1421:
  1491                           
  1492                           ;JordTermometerStyreBox.c: 247:     wait(18);
  1493     06C3  3012               	movlw	18
  1494     06C4  00F0               	movwf	wait@time
  1495     06C5  3000               	movlw	0
  1496     06C6  00F1               	movwf	wait@time+1
  1497     06C7  2189               	fcall	_wait
  1498     06C8                     l1423:
  1499                           
  1500                           ;JordTermometerStyreBox.c: 250:     Expected_check_bit ^= PORTAbits.RA3;
  1501     06C8  1283               	bcf	3,5	;RP0=0, select bank0
  1502     06C9  1303               	bcf	3,6	;RP1=0, select bank0
  1503     06CA  0C05               	rrf	5,w	;volatile
  1504     06CB  00AD               	movwf	??_readMessage
  1505     06CC  0CAD               	rrf	??_readMessage,f
  1506     06CD  0C2D               	rrf	??_readMessage,w
  1507     06CE  3901               	andlw	1
  1508     06CF  00FF               	movwf	btemp+1
  1509     06D0  087F               	movf	btemp+1,w
  1510     06D1  06B8               	xorwf	readMessage@Expected_check_bit,f
  1511     06D2                     l1425:
  1512                           
  1513                           ;JordTermometerStyreBox.c: 251:     Batt_status = (Batt_status << 1) | PORTAbits.RA3;
  1514     06D2  0C05               	rrf	5,w	;volatile
  1515     06D3  00AD               	movwf	??_readMessage
  1516     06D4  0CAD               	rrf	??_readMessage,f
  1517     06D5  0C2D               	rrf	??_readMessage,w
  1518     06D6  3901               	andlw	1
  1519     06D7  00AE               	movwf	??_readMessage+1
  1520     06D8  01AF               	clrf	??_readMessage+2
  1521     06D9  083A               	movf	readMessage@Batt_status+1,w
  1522     06DA  00B1               	movwf	??_readMessage+4
  1523     06DB  0839               	movf	readMessage@Batt_status,w
  1524     06DC  00B0               	movwf	??_readMessage+3
  1525     06DD  1003               	clrc
  1526     06DE  0DB0               	rlf	??_readMessage+3,f
  1527     06DF  0DB1               	rlf	??_readMessage+4,f
  1528     06E0  082E               	movf	??_readMessage+1,w
  1529     06E1  0430               	iorwf	??_readMessage+3,w
  1530     06E2  00B2               	movwf	??_readMessage+5
  1531     06E3  082F               	movf	??_readMessage+2,w
  1532     06E4  0431               	iorwf	??_readMessage+4,w
  1533     06E5  00B3               	movwf	??_readMessage+6
  1534     06E6  0832               	movf	??_readMessage+5,w
  1535     06E7  00B9               	movwf	readMessage@Batt_status
  1536     06E8  0833               	movf	??_readMessage+6,w
  1537     06E9  00BA               	movwf	readMessage@Batt_status+1
  1538     06EA                     l1427:
  1539                           
  1540                           ;JordTermometerStyreBox.c: 252:     PORTAbits.RA4 = 0;
  1541     06EA  1205               	bcf	5,4	;volatile
  1542     06EB                     l1429:
  1543                           
  1544                           ;JordTermometerStyreBox.c: 254:     wait(13);
  1545     06EB  300D               	movlw	13
  1546     06EC  00F0               	movwf	wait@time
  1547     06ED  3000               	movlw	0
  1548     06EE  00F1               	movwf	wait@time+1
  1549     06EF  2189               	fcall	_wait
  1550     06F0                     l1431:
  1551                           
  1552                           ;JordTermometerStyreBox.c: 255:     Expected_check_bit ^= PORTAbits.RA3;
  1553     06F0  1283               	bcf	3,5	;RP0=0, select bank0
  1554     06F1  1303               	bcf	3,6	;RP1=0, select bank0
  1555     06F2  0C05               	rrf	5,w	;volatile
  1556     06F3  00AD               	movwf	??_readMessage
  1557     06F4  0CAD               	rrf	??_readMessage,f
  1558     06F5  0C2D               	rrf	??_readMessage,w
  1559     06F6  3901               	andlw	1
  1560     06F7  00FF               	movwf	btemp+1
  1561     06F8  087F               	movf	btemp+1,w
  1562     06F9  06B8               	xorwf	readMessage@Expected_check_bit,f
  1563                           
  1564                           ;JordTermometerStyreBox.c: 256:     Batt_status = (Batt_status << 1) | PORTAbits.RA3;
  1565     06FA  0C05               	rrf	5,w	;volatile
  1566     06FB  00AD               	movwf	??_readMessage
  1567     06FC  0CAD               	rrf	??_readMessage,f
  1568     06FD  0C2D               	rrf	??_readMessage,w
  1569     06FE  3901               	andlw	1
  1570     06FF  00AE               	movwf	??_readMessage+1
  1571     0700  01AF               	clrf	??_readMessage+2
  1572     0701  083A               	movf	readMessage@Batt_status+1,w
  1573     0702  00B1               	movwf	??_readMessage+4
  1574     0703  0839               	movf	readMessage@Batt_status,w
  1575     0704  00B0               	movwf	??_readMessage+3
  1576     0705  1003               	clrc
  1577     0706  0DB0               	rlf	??_readMessage+3,f
  1578     0707  0DB1               	rlf	??_readMessage+4,f
  1579     0708  082E               	movf	??_readMessage+1,w
  1580     0709  0430               	iorwf	??_readMessage+3,w
  1581     070A  00B2               	movwf	??_readMessage+5
  1582     070B  082F               	movf	??_readMessage+2,w
  1583     070C  0431               	iorwf	??_readMessage+4,w
  1584     070D  00B3               	movwf	??_readMessage+6
  1585     070E  0832               	movf	??_readMessage+5,w
  1586     070F  00B9               	movwf	readMessage@Batt_status
  1587     0710  0833               	movf	??_readMessage+6,w
  1588     0711  00BA               	movwf	readMessage@Batt_status+1
  1589     0712                     l1433:
  1590                           
  1591                           ;JordTermometerStyreBox.c: 257:     PORTAbits.RA4 = 1;
  1592     0712  1605               	bsf	5,4	;volatile
  1593     0713                     l1435:
  1594                           
  1595                           ;JordTermometerStyreBox.c: 259:     wait(13);
  1596     0713  300D               	movlw	13
  1597     0714  00F0               	movwf	wait@time
  1598     0715  3000               	movlw	0
  1599     0716  00F1               	movwf	wait@time+1
  1600     0717  2189               	fcall	_wait
  1601     0718                     l1437:
  1602                           
  1603                           ;JordTermometerStyreBox.c: 260:     Expected_check_bit ^= PORTAbits.RA3;
  1604     0718  1283               	bcf	3,5	;RP0=0, select bank0
  1605     0719  1303               	bcf	3,6	;RP1=0, select bank0
  1606     071A  0C05               	rrf	5,w	;volatile
  1607     071B  00AD               	movwf	??_readMessage
  1608     071C  0CAD               	rrf	??_readMessage,f
  1609     071D  0C2D               	rrf	??_readMessage,w
  1610     071E  3901               	andlw	1
  1611     071F  00FF               	movwf	btemp+1
  1612     0720  087F               	movf	btemp+1,w
  1613     0721  06B8               	xorwf	readMessage@Expected_check_bit,f
  1614     0722                     l1439:
  1615                           
  1616                           ;JordTermometerStyreBox.c: 261:     PORTAbits.RA4 = 0;
  1617     0722  1205               	bcf	5,4	;volatile
  1618     0723                     l1441:
  1619                           
  1620                           ;JordTermometerStyreBox.c: 263:     wait(26);
  1621     0723  301A               	movlw	26
  1622     0724  00F0               	movwf	wait@time
  1623     0725  3000               	movlw	0
  1624     0726  00F1               	movwf	wait@time+1
  1625     0727  2189               	fcall	_wait
  1626     0728                     l1443:
  1627                           
  1628                           ;JordTermometerStyreBox.c: 265:     unsigned int temp = (temp_data & 0x00ff) << 8 | (tem
      +                          p_data & 0xff00) >> 8;
  1629     0728  1283               	bcf	3,5	;RP0=0, select bank0
  1630     0729  1303               	bcf	3,6	;RP1=0, select bank0
  1631     072A  083E               	movf	readMessage@temp_data+1,w
  1632     072B  00AE               	movwf	??_readMessage+1
  1633     072C  083D               	movf	readMessage@temp_data,w
  1634     072D  00AD               	movwf	??_readMessage
  1635     072E  082E               	movf	??_readMessage+1,w
  1636     072F  00AD               	movwf	??_readMessage
  1637     0730  01AE               	clrf	??_readMessage+1
  1638     0731  30FF               	movlw	255
  1639     0732  052D               	andwf	??_readMessage,w
  1640     0733  00AF               	movwf	??_readMessage+2
  1641     0734  3000               	movlw	0
  1642     0735  052E               	andwf	??_readMessage+1,w
  1643     0736  00B0               	movwf	??_readMessage+3
  1644     0737  30FF               	movlw	255
  1645     0738  053D               	andwf	readMessage@temp_data,w
  1646     0739  00B1               	movwf	??_readMessage+4
  1647     073A  3000               	movlw	0
  1648     073B  053E               	andwf	readMessage@temp_data+1,w
  1649     073C  00B2               	movwf	??_readMessage+5
  1650     073D  0831               	movf	??_readMessage+4,w
  1651     073E  00B2               	movwf	??_readMessage+5
  1652     073F  01B1               	clrf	??_readMessage+4
  1653     0740  082F               	movf	??_readMessage+2,w
  1654     0741  0431               	iorwf	??_readMessage+4,w
  1655     0742  00BB               	movwf	readMessage@temp
  1656     0743  0830               	movf	??_readMessage+3,w
  1657     0744  0432               	iorwf	??_readMessage+5,w
  1658     0745  00BC               	movwf	readMessage@temp+1
  1659                           
  1660                           ;JordTermometerStyreBox.c: 266:     temp = (temp & 0x0f0f) << 4 | (temp & 0xf0f0) >> 4;
  1661     0746  083C               	movf	readMessage@temp+1,w
  1662     0747  00AE               	movwf	??_readMessage+1
  1663     0748  083B               	movf	readMessage@temp,w
  1664     0749  00AD               	movwf	??_readMessage
  1665     074A  3004               	movlw	4
  1666     074B                     u885:
  1667     074B  1003               	clrc
  1668     074C  0CAE               	rrf	??_readMessage+1,f
  1669     074D  0CAD               	rrf	??_readMessage,f
  1670     074E  3EFF               	addlw	-1
  1671     074F  1D03               	skipz
  1672     0750  2F4B               	goto	u885
  1673     0751  300F               	movlw	15
  1674     0752  052D               	andwf	??_readMessage,w
  1675     0753  00AF               	movwf	??_readMessage+2
  1676     0754  300F               	movlw	15
  1677     0755  052E               	andwf	??_readMessage+1,w
  1678     0756  00B0               	movwf	??_readMessage+3
  1679     0757  300F               	movlw	15
  1680     0758  053B               	andwf	readMessage@temp,w
  1681     0759  00B1               	movwf	??_readMessage+4
  1682     075A  300F               	movlw	15
  1683     075B  053C               	andwf	readMessage@temp+1,w
  1684     075C  00B2               	movwf	??_readMessage+5
  1685     075D  0EB1               	swapf	??_readMessage+4,f
  1686     075E  0EB2               	swapf	??_readMessage+5,f
  1687     075F  30F0               	movlw	240
  1688     0760  05B2               	andwf	??_readMessage+5,f
  1689     0761  0831               	movf	??_readMessage+4,w
  1690     0762  390F               	andlw	15
  1691     0763  04B2               	iorwf	??_readMessage+5,f
  1692     0764  30F0               	movlw	240
  1693     0765  05B1               	andwf	??_readMessage+4,f
  1694     0766  082F               	movf	??_readMessage+2,w
  1695     0767  0431               	iorwf	??_readMessage+4,w
  1696     0768  00BB               	movwf	readMessage@temp
  1697     0769  0830               	movf	??_readMessage+3,w
  1698     076A  0432               	iorwf	??_readMessage+5,w
  1699     076B  00BC               	movwf	readMessage@temp+1
  1700                           
  1701                           ;JordTermometerStyreBox.c: 267:     temp = (temp & 0x3333) << 2 | (temp & 0xcccc) >> 2;
  1702     076C  083C               	movf	readMessage@temp+1,w
  1703     076D  00AE               	movwf	??_readMessage+1
  1704     076E  083B               	movf	readMessage@temp,w
  1705     076F  00AD               	movwf	??_readMessage
  1706     0770  1003               	clrc
  1707     0771  0CAE               	rrf	??_readMessage+1,f
  1708     0772  0CAD               	rrf	??_readMessage,f
  1709     0773  1003               	clrc
  1710     0774  0CAE               	rrf	??_readMessage+1,f
  1711     0775  0CAD               	rrf	??_readMessage,f
  1712     0776  3033               	movlw	51
  1713     0777  052D               	andwf	??_readMessage,w
  1714     0778  00AF               	movwf	??_readMessage+2
  1715     0779  3033               	movlw	51
  1716     077A  052E               	andwf	??_readMessage+1,w
  1717     077B  00B0               	movwf	??_readMessage+3
  1718     077C  3033               	movlw	51
  1719     077D  053B               	andwf	readMessage@temp,w
  1720     077E  00B1               	movwf	??_readMessage+4
  1721     077F  3033               	movlw	51
  1722     0780  053C               	andwf	readMessage@temp+1,w
  1723     0781  00B2               	movwf	??_readMessage+5
  1724     0782  1003               	clrc
  1725     0783  0DB1               	rlf	??_readMessage+4,f
  1726     0784  0DB2               	rlf	??_readMessage+5,f
  1727     0785  1003               	clrc
  1728     0786  0DB1               	rlf	??_readMessage+4,f
  1729     0787  0DB2               	rlf	??_readMessage+5,f
  1730     0788  082F               	movf	??_readMessage+2,w
  1731     0789  0431               	iorwf	??_readMessage+4,w
  1732     078A  00BB               	movwf	readMessage@temp
  1733     078B  0830               	movf	??_readMessage+3,w
  1734     078C  0432               	iorwf	??_readMessage+5,w
  1735     078D  00BC               	movwf	readMessage@temp+1
  1736                           
  1737                           ;JordTermometerStyreBox.c: 268:     temp = (temp & 0x5555) << 1 | (temp & 0xaaaa) >> 1;
  1738     078E  083C               	movf	readMessage@temp+1,w
  1739     078F  00AE               	movwf	??_readMessage+1
  1740     0790  083B               	movf	readMessage@temp,w
  1741     0791  00AD               	movwf	??_readMessage
  1742     0792  1003               	clrc
  1743     0793  0CAE               	rrf	??_readMessage+1,f
  1744     0794  0CAD               	rrf	??_readMessage,f
  1745     0795  3055               	movlw	85
  1746     0796  052D               	andwf	??_readMessage,w
  1747     0797  00AF               	movwf	??_readMessage+2
  1748     0798  3055               	movlw	85
  1749     0799  052E               	andwf	??_readMessage+1,w
  1750     079A  00B0               	movwf	??_readMessage+3
  1751     079B  3055               	movlw	85
  1752     079C  053B               	andwf	readMessage@temp,w
  1753     079D  00B1               	movwf	??_readMessage+4
  1754     079E  3055               	movlw	85
  1755     079F  053C               	andwf	readMessage@temp+1,w
  1756     07A0  00B2               	movwf	??_readMessage+5
  1757     07A1  1003               	clrc
  1758     07A2  0DB1               	rlf	??_readMessage+4,f
  1759     07A3  0DB2               	rlf	??_readMessage+5,f
  1760     07A4  082F               	movf	??_readMessage+2,w
  1761     07A5  0431               	iorwf	??_readMessage+4,w
  1762     07A6  00BB               	movwf	readMessage@temp
  1763     07A7  0830               	movf	??_readMessage+3,w
  1764     07A8  0432               	iorwf	??_readMessage+5,w
  1765     07A9  00BC               	movwf	readMessage@temp+1
  1766                           
  1767                           ;JordTermometerStyreBox.c: 270:     temp = temp >> 6;
  1768     07AA  083C               	movf	readMessage@temp+1,w
  1769     07AB  00AE               	movwf	??_readMessage+1
  1770     07AC  083B               	movf	readMessage@temp,w
  1771     07AD  00AD               	movwf	??_readMessage
  1772     07AE  3006               	movlw	6
  1773     07AF                     u895:
  1774     07AF  1003               	clrc
  1775     07B0  0CAE               	rrf	??_readMessage+1,f
  1776     07B1  0CAD               	rrf	??_readMessage,f
  1777     07B2  3EFF               	addlw	-1
  1778     07B3  1D03               	skipz
  1779     07B4  2FAF               	goto	u895
  1780     07B5  082D               	movf	??_readMessage,w
  1781     07B6  00BB               	movwf	readMessage@temp
  1782     07B7  082E               	movf	??_readMessage+1,w
  1783     07B8  00BC               	movwf	readMessage@temp+1
  1784     07B9                     l1445:
  1785                           
  1786                           ;JordTermometerStyreBox.c: 272:     char Batt = 0;
  1787     07B9  01B5               	clrf	readMessage@Batt
  1788     07BA                     l1447:
  1789                           
  1790                           ;JordTermometerStyreBox.c: 273:     char Error_state = 0;
  1791     07BA  01B4               	clrf	readMessage@Error_state
  1792                           
  1793                           ;JordTermometerStyreBox.c: 275:     if (Batt_status == 3) {
  1794     07BB  3003               	movlw	3
  1795     07BC  0639               	xorwf	readMessage@Batt_status,w
  1796     07BD  043A               	iorwf	readMessage@Batt_status+1,w
  1797     07BE  1D03               	btfss	3,2
  1798     07BF  2FC1               	goto	u901
  1799     07C0  2FC2               	goto	u900
  1800     07C1                     u901:
  1801     07C1  2FC5               	goto	l1451
  1802     07C2                     u900:
  1803     07C2                     l1449:
  1804                           
  1805                           ;JordTermometerStyreBox.c: 276:         Batt = 1;
  1806     07C2  01B5               	clrf	readMessage@Batt
  1807     07C3  0AB5               	incf	readMessage@Batt,f
  1808                           
  1809                           ;JordTermometerStyreBox.c: 277:     } else if (Batt_status == 0) {
  1810     07C4  2FCF               	goto	l1455
  1811     07C5                     l1451:
  1812     07C5  0839               	movf	readMessage@Batt_status,w
  1813     07C6  043A               	iorwf	readMessage@Batt_status+1,w
  1814     07C7  1D03               	btfss	3,2
  1815     07C8  2FCA               	goto	u911
  1816     07C9  2FCB               	goto	u910
  1817     07CA                     u911:
  1818     07CA  2FCD               	goto	l73
  1819     07CB                     u910:
  1820     07CB                     l1453:
  1821                           
  1822                           ;JordTermometerStyreBox.c: 278:         Batt = 0;
  1823     07CB  01B5               	clrf	readMessage@Batt
  1824                           
  1825                           ;JordTermometerStyreBox.c: 279:     } else {
  1826     07CC  2FCF               	goto	l1455
  1827     07CD                     l73:
  1828                           
  1829                           ;JordTermometerStyreBox.c: 280:         Error_state = 1;
  1830     07CD  01B4               	clrf	readMessage@Error_state
  1831     07CE  0AB4               	incf	readMessage@Error_state,f
  1832     07CF                     l1455:
  1833                           
  1834                           ;JordTermometerStyreBox.c: 285:     updateLCD(temp*5 - (temp >> 3), 0, Batt, Error_state
      +                          );
  1835     07CF  083C               	movf	readMessage@temp+1,w
  1836     07D0  00AE               	movwf	??_readMessage+1
  1837     07D1  083B               	movf	readMessage@temp,w
  1838     07D2  00AD               	movwf	??_readMessage
  1839     07D3  1003               	clrc
  1840     07D4  0CAE               	rrf	??_readMessage+1,f
  1841     07D5  0CAD               	rrf	??_readMessage,f
  1842     07D6  1003               	clrc
  1843     07D7  0CAE               	rrf	??_readMessage+1,f
  1844     07D8  0CAD               	rrf	??_readMessage,f
  1845     07D9  1003               	clrc
  1846     07DA  0CAE               	rrf	??_readMessage+1,f
  1847     07DB  0CAD               	rrf	??_readMessage,f
  1848     07DC  083C               	movf	readMessage@temp+1,w
  1849     07DD  00F1               	movwf	___wmul@multiplier+1
  1850     07DE  083B               	movf	readMessage@temp,w
  1851     07DF  00F0               	movwf	___wmul@multiplier
  1852     07E0  3005               	movlw	5
  1853     07E1  00F2               	movwf	___wmul@multiplicand
  1854     07E2  3000               	movlw	0
  1855     07E3  00F3               	movwf	___wmul@multiplicand+1
  1856     07E4  21D1               	fcall	___wmul
  1857     07E5  1283               	bcf	3,5	;RP0=0, select bank0
  1858     07E6  1303               	bcf	3,6	;RP1=0, select bank0
  1859     07E7  082D               	movf	??_readMessage,w
  1860     07E8  0270               	subwf	?___wmul,w
  1861     07E9  00A8               	movwf	updateLCD@value
  1862     07EA  082E               	movf	??_readMessage+1,w
  1863     07EB  1C03               	skipc
  1864     07EC  0A2E               	incf	??_readMessage+1,w
  1865     07ED  0271               	subwf	?___wmul+1,w
  1866     07EE  00A9               	movwf	updateLCD@value+1
  1867     07EF  01AA               	clrf	updateLCD@line
  1868     07F0  0835               	movf	readMessage@Batt,w
  1869     07F1  00AB               	movwf	updateLCD@batStatus
  1870     07F2  0834               	movf	readMessage@Error_state,w
  1871     07F3  00AC               	movwf	updateLCD@error
  1872     07F4  2361               	fcall	_updateLCD
  1873     07F5                     l75:
  1874     07F5  0008               	return
  1875     07F6                     __end_of_readMessage:
  1876                           
  1877                           	psect	text3
  1878     0361                     __ptext3:	
  1879 ;; *************** function _updateLCD *****************
  1880 ;; Defined at:
  1881 ;;		line 121 in file "JordTermometerStyreBox.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  value           2    8[BANK0 ] unsigned int 
  1884 ;;  line            1   10[BANK0 ] unsigned char 
  1885 ;;  batStatus       1   11[BANK0 ] unsigned char 
  1886 ;;  error           1   12[BANK0 ] unsigned char 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  tempStr         1   11[COMMON] PTR unsigned char 
  1889 ;;		 -> mV2Celcius@tempStr(6), 
  1890 ;;  tempStr         1   10[COMMON] PTR unsigned char 
  1891 ;;		 -> mV2Celcius@tempStr(6), 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1901 ;;      Params:         0       5       0       0
  1902 ;;      Locals:         2       0       0       0
  1903 ;;      Temps:          0       0       0       0
  1904 ;;      Totals:         2       5       0       0
  1905 ;;Total ram usage:        7 bytes
  1906 ;; Hardware stack levels used: 1
  1907 ;; Hardware stack levels required when called: 2
  1908 ;; This function calls:
  1909 ;;		_CommandLCD
  1910 ;;		_mV2Celcius
  1911 ;;		_writeString
  1912 ;; This function is called by:
  1913 ;;		_readMessage
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917     0361                     _updateLCD:	
  1918                           ;psect for function _updateLCD
  1919                           
  1920     0361                     l1261:	
  1921                           ;incstack = 0
  1922                           ; Regs used in _updateLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1923                           
  1924                           
  1925                           ;JordTermometerStyreBox.c: 123:     if(line){
  1926     0361  1283               	bcf	3,5	;RP0=0, select bank0
  1927     0362  1303               	bcf	3,6	;RP1=0, select bank0
  1928     0363  082A               	movf	updateLCD@line,w
  1929     0364  1903               	btfsc	3,2
  1930     0365  2B67               	goto	u761
  1931     0366  2B68               	goto	u760
  1932     0367                     u761:
  1933     0367  2BA3               	goto	l1285
  1934     0368                     u760:
  1935     0368                     l1263:
  1936                           
  1937                           ;JordTermometerStyreBox.c: 124:         CommandLCD(0b11000011);
  1938     0368  30C3               	movlw	195
  1939     0369  21F6               	fcall	_CommandLCD
  1940     036A                     l1265:
  1941                           
  1942                           ;JordTermometerStyreBox.c: 125:         char* tempStr = mV2Celcius(value);
  1943     036A  1283               	bcf	3,5	;RP0=0, select bank0
  1944     036B  1303               	bcf	3,6	;RP1=0, select bank0
  1945     036C  0829               	movf	updateLCD@value+1,w
  1946     036D  00F9               	movwf	mV2Celcius@inputValue+1
  1947     036E  0828               	movf	updateLCD@value,w
  1948     036F  00F8               	movwf	mV2Celcius@inputValue
  1949     0370  229C               	fcall	_mV2Celcius
  1950     0371  00FA               	movwf	updateLCD@tempStr
  1951     0372                     l1267:
  1952                           
  1953                           ;JordTermometerStyreBox.c: 126:         writeString(tempStr, 5);
  1954     0372  087A               	movf	updateLCD@tempStr,w
  1955     0373  00F1               	movwf	writeString@string
  1956     0374  3000               	movlw	0
  1957     0375  00F2               	movwf	writeString@string+1
  1958     0376  3005               	movlw	5
  1959     0377  00F3               	movwf	writeString@length
  1960     0378  219B               	fcall	_writeString
  1961     0379                     l1269:
  1962                           
  1963                           ;JordTermometerStyreBox.c: 128:         if (!error) {
  1964     0379  1283               	bcf	3,5	;RP0=0, select bank0
  1965     037A  1303               	bcf	3,6	;RP1=0, select bank0
  1966     037B  082C               	movf	updateLCD@error,w
  1967     037C  1D03               	btfss	3,2
  1968     037D  2B7F               	goto	u771
  1969     037E  2B80               	goto	u770
  1970     037F                     u771:
  1971     037F  2B99               	goto	l1281
  1972     0380                     u770:
  1973     0380                     l1271:
  1974                           
  1975                           ;JordTermometerStyreBox.c: 129:             if (batStatus) {
  1976     0380  082B               	movf	updateLCD@batStatus,w
  1977     0381  1903               	btfsc	3,2
  1978     0382  2B84               	goto	u781
  1979     0383  2B85               	goto	u780
  1980     0384                     u781:
  1981     0384  2B8F               	goto	l1277
  1982     0385                     u780:
  1983     0385                     l1273:
  1984                           
  1985                           ;JordTermometerStyreBox.c: 130:                 CommandLCD(0b11001100);
  1986     0385  30CC               	movlw	204
  1987     0386  21F6               	fcall	_CommandLCD
  1988     0387                     l1275:
  1989                           
  1990                           ;JordTermometerStyreBox.c: 131:                 writeString("Okay", 4);
  1991     0387  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1992     0388  00F1               	movwf	writeString@string
  1993     0389  3080               	movlw	128
  1994     038A  00F2               	movwf	writeString@string+1
  1995     038B  3004               	movlw	4
  1996     038C  00F3               	movwf	writeString@length
  1997     038D  219B               	fcall	_writeString
  1998                           
  1999                           ;JordTermometerStyreBox.c: 132:             } else {
  2000     038E  2BDD               	goto	l59
  2001     038F                     l1277:
  2002                           
  2003                           ;JordTermometerStyreBox.c: 133:                 CommandLCD(0b11001100);
  2004     038F  30CC               	movlw	204
  2005     0390  21F6               	fcall	_CommandLCD
  2006     0391                     l1279:
  2007                           
  2008                           ;JordTermometerStyreBox.c: 134:                 writeString(" Low", 4);
  2009     0391  3006               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2010     0392  00F1               	movwf	writeString@string
  2011     0393  3080               	movlw	128
  2012     0394  00F2               	movwf	writeString@string+1
  2013     0395  3004               	movlw	4
  2014     0396  00F3               	movwf	writeString@length
  2015     0397  219B               	fcall	_writeString
  2016     0398  2BDD               	goto	l59
  2017     0399                     l1281:
  2018                           
  2019                           ;JordTermometerStyreBox.c: 137:             CommandLCD(0b11001100);
  2020     0399  30CC               	movlw	204
  2021     039A  21F6               	fcall	_CommandLCD
  2022     039B                     l1283:
  2023                           
  2024                           ;JordTermometerStyreBox.c: 138:             writeString(" Err", 4);
  2025     039B  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2026     039C  00F1               	movwf	writeString@string
  2027     039D  3080               	movlw	128
  2028     039E  00F2               	movwf	writeString@string+1
  2029     039F  3004               	movlw	4
  2030     03A0  00F3               	movwf	writeString@length
  2031     03A1  219B               	fcall	_writeString
  2032     03A2  2BDD               	goto	l59
  2033     03A3                     l1285:
  2034                           
  2035                           ;JordTermometerStyreBox.c: 141:         CommandLCD(0b10000011);
  2036     03A3  3083               	movlw	131
  2037     03A4  21F6               	fcall	_CommandLCD
  2038     03A5                     l1287:
  2039                           
  2040                           ;JordTermometerStyreBox.c: 142:         char* tempStr = mV2Celcius(value);
  2041     03A5  1283               	bcf	3,5	;RP0=0, select bank0
  2042     03A6  1303               	bcf	3,6	;RP1=0, select bank0
  2043     03A7  0829               	movf	updateLCD@value+1,w
  2044     03A8  00F9               	movwf	mV2Celcius@inputValue+1
  2045     03A9  0828               	movf	updateLCD@value,w
  2046     03AA  00F8               	movwf	mV2Celcius@inputValue
  2047     03AB  229C               	fcall	_mV2Celcius
  2048     03AC  00FB               	movwf	updateLCD@tempStr_93
  2049     03AD                     l1289:
  2050                           
  2051                           ;JordTermometerStyreBox.c: 143:         writeString(tempStr, 5);
  2052     03AD  087B               	movf	updateLCD@tempStr_93,w
  2053     03AE  00F1               	movwf	writeString@string
  2054     03AF  3000               	movlw	0
  2055     03B0  00F2               	movwf	writeString@string+1
  2056     03B1  3005               	movlw	5
  2057     03B2  00F3               	movwf	writeString@length
  2058     03B3  219B               	fcall	_writeString
  2059     03B4                     l1291:
  2060                           
  2061                           ;JordTermometerStyreBox.c: 145:         if (!error) {
  2062     03B4  1283               	bcf	3,5	;RP0=0, select bank0
  2063     03B5  1303               	bcf	3,6	;RP1=0, select bank0
  2064     03B6  082C               	movf	updateLCD@error,w
  2065     03B7  1D03               	btfss	3,2
  2066     03B8  2BBA               	goto	u791
  2067     03B9  2BBB               	goto	u790
  2068     03BA                     u791:
  2069     03BA  2BD4               	goto	l1303
  2070     03BB                     u790:
  2071     03BB                     l1293:
  2072                           
  2073                           ;JordTermometerStyreBox.c: 146:             if (batStatus) {
  2074     03BB  082B               	movf	updateLCD@batStatus,w
  2075     03BC  1903               	btfsc	3,2
  2076     03BD  2BBF               	goto	u801
  2077     03BE  2BC0               	goto	u800
  2078     03BF                     u801:
  2079     03BF  2BCA               	goto	l1299
  2080     03C0                     u800:
  2081     03C0                     l1295:
  2082                           
  2083                           ;JordTermometerStyreBox.c: 147:                 CommandLCD(0b10001100);
  2084     03C0  308C               	movlw	140
  2085     03C1  21F6               	fcall	_CommandLCD
  2086     03C2                     l1297:
  2087                           
  2088                           ;JordTermometerStyreBox.c: 148:                 writeString("Okay", 4);
  2089     03C2  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2090     03C3  00F1               	movwf	writeString@string
  2091     03C4  3080               	movlw	128
  2092     03C5  00F2               	movwf	writeString@string+1
  2093     03C6  3004               	movlw	4
  2094     03C7  00F3               	movwf	writeString@length
  2095     03C8  219B               	fcall	_writeString
  2096                           
  2097                           ;JordTermometerStyreBox.c: 149:             } else {
  2098     03C9  2BDD               	goto	l59
  2099     03CA                     l1299:
  2100                           
  2101                           ;JordTermometerStyreBox.c: 150:                 CommandLCD(0b10001100);
  2102     03CA  308C               	movlw	140
  2103     03CB  21F6               	fcall	_CommandLCD
  2104     03CC                     l1301:
  2105                           
  2106                           ;JordTermometerStyreBox.c: 151:                 writeString(" Low", 4);
  2107     03CC  3006               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2108     03CD  00F1               	movwf	writeString@string
  2109     03CE  3080               	movlw	128
  2110     03CF  00F2               	movwf	writeString@string+1
  2111     03D0  3004               	movlw	4
  2112     03D1  00F3               	movwf	writeString@length
  2113     03D2  219B               	fcall	_writeString
  2114     03D3  2BDD               	goto	l59
  2115     03D4                     l1303:
  2116                           
  2117                           ;JordTermometerStyreBox.c: 154:             CommandLCD(0b10001100);
  2118     03D4  308C               	movlw	140
  2119     03D5  21F6               	fcall	_CommandLCD
  2120     03D6                     l1305:
  2121                           
  2122                           ;JordTermometerStyreBox.c: 155:             writeString(" Err", 4);
  2123     03D6  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2124     03D7  00F1               	movwf	writeString@string
  2125     03D8  3080               	movlw	128
  2126     03D9  00F2               	movwf	writeString@string+1
  2127     03DA  3004               	movlw	4
  2128     03DB  00F3               	movwf	writeString@length
  2129     03DC  219B               	fcall	_writeString
  2130     03DD                     l59:
  2131     03DD  0008               	return
  2132     03DE                     __end_of_updateLCD:
  2133                           
  2134                           	psect	text4
  2135     019B                     __ptext4:	
  2136 ;; *************** function _writeString *****************
  2137 ;; Defined at:
  2138 ;;		line 83 in file "JordTermometerStyreBox.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  string          2    1[COMMON] PTR unsigned char 
  2141 ;;		 -> STR_10(2), STR_9(4), STR_8(2), STR_7(4), 
  2142 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
  2143 ;;		 -> STR_2(5), STR_1(5), mV2Celcius@tempStr(6), 
  2144 ;;  length          1    3[COMMON] unsigned char 
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;  i               1    4[COMMON] unsigned char 
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2156 ;;      Params:         3       0       0       0
  2157 ;;      Locals:         1       0       0       0
  2158 ;;      Temps:          0       0       0       0
  2159 ;;      Totals:         4       0       0       0
  2160 ;;Total ram usage:        4 bytes
  2161 ;; Hardware stack levels used: 1
  2162 ;; Hardware stack levels required when called: 1
  2163 ;; This function calls:
  2164 ;;		_writeChar
  2165 ;; This function is called by:
  2166 ;;		_updateLCD
  2167 ;;		_staticInfo
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171     019B                     _writeString:	
  2172                           ;psect for function _writeString
  2173                           
  2174     019B                     l1225:	
  2175                           ;incstack = 0
  2176                           ; Regs used in _writeString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2177                           
  2178                           
  2179                           ;JordTermometerStyreBox.c: 84:     for (unsigned char i = 0; i < length; i++) {
  2180     019B  01F4               	clrf	writeString@i
  2181     019C  29AC               	goto	l1231
  2182     019D                     l1227:
  2183                           
  2184                           ;JordTermometerStyreBox.c: 85:         writeChar(string[i]);
  2185     019D  0874               	movf	writeString@i,w
  2186     019E  0771               	addwf	writeString@string,w
  2187     019F  0084               	movwf	4
  2188     01A0  0872               	movf	writeString@string+1,w
  2189     01A1  1803               	skipnc
  2190     01A2  0A72               	incf	writeString@string+1,w
  2191     01A3  1283               	bcf	3,5	;RP0=0, select bank0
  2192     01A4  1303               	bcf	3,6	;RP1=0, select bank0
  2193     01A5  00FF               	movwf	btemp+1
  2194     01A6  2001               	fcall	stringtab
  2195     01A7  216F               	fcall	_writeChar
  2196     01A8                     l1229:
  2197                           
  2198                           ;JordTermometerStyreBox.c: 86:     }
  2199     01A8  3001               	movlw	1
  2200     01A9  00FF               	movwf	btemp+1
  2201     01AA  087F               	movf	btemp+1,w
  2202     01AB  07F4               	addwf	writeString@i,f
  2203     01AC                     l1231:
  2204     01AC  0873               	movf	writeString@length,w
  2205     01AD  0274               	subwf	writeString@i,w
  2206     01AE  1C03               	skipc
  2207     01AF  29B1               	goto	u741
  2208     01B0  29B2               	goto	u740
  2209     01B1                     u741:
  2210     01B1  299D               	goto	l1227
  2211     01B2                     u740:
  2212     01B2                     l39:
  2213     01B2  0008               	return
  2214     01B3                     __end_of_writeString:
  2215                           
  2216                           	psect	text5
  2217     016F                     __ptext5:	
  2218 ;; *************** function _writeChar *****************
  2219 ;; Defined at:
  2220 ;;		line 69 in file "JordTermometerStyreBox.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  character       1    wreg     unsigned char 
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;  character       1    0[COMMON] unsigned char 
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  1    wreg      void 
  2227 ;; Registers used:
  2228 ;;		wreg
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2234 ;;      Params:         0       0       0       0
  2235 ;;      Locals:         1       0       0       0
  2236 ;;      Temps:          0       0       0       0
  2237 ;;      Totals:         1       0       0       0
  2238 ;;Total ram usage:        1 bytes
  2239 ;; Hardware stack levels used: 1
  2240 ;; This function calls:
  2241 ;;		Nothing
  2242 ;; This function is called by:
  2243 ;;		_writeString
  2244 ;;		_staticInfo
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248     016F                     _writeChar:	
  2249                           ;psect for function _writeChar
  2250                           
  2251                           
  2252                           ;incstack = 0
  2253                           ; Regs used in _writeChar: [wreg]
  2254                           ;writeChar@character stored from wreg
  2255     016F  00F0               	movwf	writeChar@character
  2256     0170                     l1119:
  2257                           
  2258                           ;JordTermometerStyreBox.c: 70:     PORTA = 0b00000001;
  2259     0170  3001               	movlw	1
  2260     0171  1283               	bcf	3,5	;RP0=0, select bank0
  2261     0172  1303               	bcf	3,6	;RP1=0, select bank0
  2262     0173  0085               	movwf	5	;volatile
  2263                           
  2264                           ;JordTermometerStyreBox.c: 71:     PORTB = character;
  2265     0174  0870               	movf	writeChar@character,w
  2266     0175  0086               	movwf	6	;volatile
  2267                           
  2268                           ;JordTermometerStyreBox.c: 75:     PORTA = 0b00000101;
  2269     0176  3005               	movlw	5
  2270     0177  0085               	movwf	5	;volatile
  2271                           
  2272                           ;JordTermometerStyreBox.c: 79:     PORTA = 0b00000001;
  2273     0178  3001               	movlw	1
  2274     0179  0085               	movwf	5	;volatile
  2275     017A                     l33:
  2276     017A  0008               	return
  2277     017B                     __end_of_writeChar:
  2278                           
  2279                           	psect	text6
  2280     029C                     __ptext6:	
  2281 ;; *************** function _mV2Celcius *****************
  2282 ;; Defined at:
  2283 ;;		line 90 in file "JordTermometerStyreBox.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;  inputValue      2    8[COMMON] unsigned int 
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;  totalC          2    6[BANK0 ] int 
  2288 ;;  intPart         2    4[BANK0 ] int 
  2289 ;;  decPart         2    2[BANK0 ] int 
  2290 ;;  milivolts       2    0[BANK0 ] int 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  1    wreg      PTR unsigned char 
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2300 ;;      Params:         2       0       0       0
  2301 ;;      Locals:         0       8       0       0
  2302 ;;      Temps:          0       0       0       0
  2303 ;;      Totals:         2       8       0       0
  2304 ;;Total ram usage:       10 bytes
  2305 ;; Hardware stack levels used: 1
  2306 ;; Hardware stack levels required when called: 1
  2307 ;; This function calls:
  2308 ;;		___awdiv
  2309 ;;		___awmod
  2310 ;; This function is called by:
  2311 ;;		_updateLCD
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315     029C                     _mV2Celcius:	
  2316                           ;psect for function _mV2Celcius
  2317                           
  2318     029C                     l1233:	
  2319                           ;incstack = 0
  2320                           ; Regs used in _mV2Celcius: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2321                           
  2322                           
  2323                           ;JordTermometerStyreBox.c: 93:     int milivolts = inputValue;
  2324     029C  0879               	movf	mV2Celcius@inputValue+1,w
  2325     029D  1283               	bcf	3,5	;RP0=0, select bank0
  2326     029E  1303               	bcf	3,6	;RP1=0, select bank0
  2327     029F  00A1               	movwf	mV2Celcius@milivolts+1
  2328     02A0  0878               	movf	mV2Celcius@inputValue,w
  2329     02A1  00A0               	movwf	mV2Celcius@milivolts
  2330     02A2                     l1235:
  2331                           
  2332                           ;JordTermometerStyreBox.c: 96:     int totalC = milivolts - 2731 + 29;
  2333     02A2  0820               	movf	mV2Celcius@milivolts,w
  2334     02A3  3E72               	addlw	114
  2335     02A4  00A6               	movwf	mV2Celcius@totalC
  2336     02A5  0821               	movf	mV2Celcius@milivolts+1,w
  2337     02A6  1803               	skipnc
  2338     02A7  3E01               	addlw	1
  2339     02A8  3EF5               	addlw	245
  2340     02A9  00A7               	movwf	mV2Celcius@totalC+1
  2341     02AA                     l1237:
  2342                           
  2343                           ;JordTermometerStyreBox.c: 98:     static char tempStr[6];;JordTermometerStyreBox.c: 101
      +                          :     if (totalC < 0) {
  2344     02AA  1FA7               	btfss	mV2Celcius@totalC+1,7
  2345     02AB  2AAD               	goto	u751
  2346     02AC  2AAE               	goto	u750
  2347     02AD                     u751:
  2348     02AD  2AB6               	goto	l1243
  2349     02AE                     u750:
  2350     02AE                     l1239:
  2351                           
  2352                           ;JordTermometerStyreBox.c: 102:         totalC = -totalC;
  2353     02AE  09A6               	comf	mV2Celcius@totalC,f
  2354     02AF  09A7               	comf	mV2Celcius@totalC+1,f
  2355     02B0  0AA6               	incf	mV2Celcius@totalC,f
  2356     02B1  1903               	skipnz
  2357     02B2  0AA7               	incf	mV2Celcius@totalC+1,f
  2358     02B3                     l1241:
  2359                           
  2360                           ;JordTermometerStyreBox.c: 103:         tempStr[0] = '-';
  2361     02B3  302D               	movlw	45
  2362     02B4  00BF               	movwf	mV2Celcius@tempStr
  2363                           
  2364                           ;JordTermometerStyreBox.c: 104:     }
  2365     02B5  2AB8               	goto	l1245
  2366     02B6                     l1243:
  2367                           
  2368                           ;JordTermometerStyreBox.c: 106:         tempStr[0] = ' ';
  2369     02B6  3020               	movlw	32
  2370     02B7  00BF               	movwf	mV2Celcius@tempStr
  2371     02B8                     l1245:
  2372                           
  2373                           ;JordTermometerStyreBox.c: 109:     int intPart = totalC / 10;
  2374     02B8  300A               	movlw	10
  2375     02B9  00F0               	movwf	___awdiv@divisor
  2376     02BA  3000               	movlw	0
  2377     02BB  00F1               	movwf	___awdiv@divisor+1
  2378     02BC  0827               	movf	mV2Celcius@totalC+1,w
  2379     02BD  00F3               	movwf	___awdiv@dividend+1
  2380     02BE  0826               	movf	mV2Celcius@totalC,w
  2381     02BF  00F2               	movwf	___awdiv@dividend
  2382     02C0  22FA               	fcall	___awdiv
  2383     02C1  0871               	movf	?___awdiv+1,w
  2384     02C2  1283               	bcf	3,5	;RP0=0, select bank0
  2385     02C3  1303               	bcf	3,6	;RP1=0, select bank0
  2386     02C4  00A5               	movwf	mV2Celcius@intPart+1
  2387     02C5  0870               	movf	?___awdiv,w
  2388     02C6  00A4               	movwf	mV2Celcius@intPart
  2389     02C7                     l1247:
  2390                           
  2391                           ;JordTermometerStyreBox.c: 110:     int decPart = totalC % 10;
  2392     02C7  300A               	movlw	10
  2393     02C8  00F0               	movwf	___awmod@divisor
  2394     02C9  3000               	movlw	0
  2395     02CA  00F1               	movwf	___awmod@divisor+1
  2396     02CB  0827               	movf	mV2Celcius@totalC+1,w
  2397     02CC  00F3               	movwf	___awmod@dividend+1
  2398     02CD  0826               	movf	mV2Celcius@totalC,w
  2399     02CE  00F2               	movwf	___awmod@dividend
  2400     02CF  2243               	fcall	___awmod
  2401     02D0  0871               	movf	?___awmod+1,w
  2402     02D1  1283               	bcf	3,5	;RP0=0, select bank0
  2403     02D2  1303               	bcf	3,6	;RP1=0, select bank0
  2404     02D3  00A3               	movwf	mV2Celcius@decPart+1
  2405     02D4  0870               	movf	?___awmod,w
  2406     02D5  00A2               	movwf	mV2Celcius@decPart
  2407     02D6                     l1249:
  2408                           
  2409                           ;JordTermometerStyreBox.c: 112:     tempStr[1] = (intPart / 10) + '0';
  2410     02D6  300A               	movlw	10
  2411     02D7  00F0               	movwf	___awdiv@divisor
  2412     02D8  3000               	movlw	0
  2413     02D9  00F1               	movwf	___awdiv@divisor+1
  2414     02DA  0825               	movf	mV2Celcius@intPart+1,w
  2415     02DB  00F3               	movwf	___awdiv@dividend+1
  2416     02DC  0824               	movf	mV2Celcius@intPart,w
  2417     02DD  00F2               	movwf	___awdiv@dividend
  2418     02DE  22FA               	fcall	___awdiv
  2419     02DF  0870               	movf	?___awdiv,w
  2420     02E0  3E30               	addlw	48
  2421     02E1  1283               	bcf	3,5	;RP0=0, select bank0
  2422     02E2  1303               	bcf	3,6	;RP1=0, select bank0
  2423     02E3  00C0               	movwf	mV2Celcius@tempStr+1
  2424     02E4                     l1251:
  2425                           
  2426                           ;JordTermometerStyreBox.c: 113:     tempStr[2] = (intPart % 10) + '0';
  2427     02E4  300A               	movlw	10
  2428     02E5  00F0               	movwf	___awmod@divisor
  2429     02E6  3000               	movlw	0
  2430     02E7  00F1               	movwf	___awmod@divisor+1
  2431     02E8  0825               	movf	mV2Celcius@intPart+1,w
  2432     02E9  00F3               	movwf	___awmod@dividend+1
  2433     02EA  0824               	movf	mV2Celcius@intPart,w
  2434     02EB  00F2               	movwf	___awmod@dividend
  2435     02EC  2243               	fcall	___awmod
  2436     02ED  0870               	movf	?___awmod,w
  2437     02EE  3E30               	addlw	48
  2438     02EF  1283               	bcf	3,5	;RP0=0, select bank0
  2439     02F0  1303               	bcf	3,6	;RP1=0, select bank0
  2440     02F1  00C1               	movwf	mV2Celcius@tempStr+2
  2441                           
  2442                           ;JordTermometerStyreBox.c: 114:     tempStr[3] = '.';
  2443     02F2  302E               	movlw	46
  2444     02F3  00C2               	movwf	mV2Celcius@tempStr+3
  2445     02F4                     l1253:
  2446                           
  2447                           ;JordTermometerStyreBox.c: 115:     tempStr[4] = decPart + '0';
  2448     02F4  0822               	movf	mV2Celcius@decPart,w
  2449     02F5  3E30               	addlw	48
  2450     02F6  00C3               	movwf	mV2Celcius@tempStr+4
  2451     02F7                     l1255:
  2452                           
  2453                           ;JordTermometerStyreBox.c: 116:     tempStr[5] = '\0';
  2454     02F7  01C4               	clrf	mV2Celcius@tempStr+5
  2455     02F8                     l1257:
  2456                           
  2457                           ;JordTermometerStyreBox.c: 118:     return tempStr;
  2458     02F8  303F               	movlw	(low (mV2Celcius@tempStr| 0))& (0+255)
  2459     02F9                     l46:
  2460     02F9  0008               	return
  2461     02FA                     __end_of_mV2Celcius:
  2462                           
  2463                           	psect	text7
  2464     0243                     __ptext7:	
  2465 ;; *************** function ___awmod *****************
  2466 ;; Defined at:
  2467 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2468 ;; Parameters:    Size  Location     Type
  2469 ;;  divisor         2    0[COMMON] int 
  2470 ;;  dividend        2    2[COMMON] int 
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;  sign            1    5[COMMON] unsigned char 
  2473 ;;  counter         1    4[COMMON] unsigned char 
  2474 ;; Return value:  Size  Location     Type
  2475 ;;                  2    0[COMMON] int 
  2476 ;; Registers used:
  2477 ;;		wreg, status,2, status,0, btemp+1
  2478 ;; Tracked objects:
  2479 ;;		On entry : 0/0
  2480 ;;		On exit  : 0/0
  2481 ;;		Unchanged: 0/0
  2482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2483 ;;      Params:         4       0       0       0
  2484 ;;      Locals:         2       0       0       0
  2485 ;;      Temps:          0       0       0       0
  2486 ;;      Totals:         6       0       0       0
  2487 ;;Total ram usage:        6 bytes
  2488 ;; Hardware stack levels used: 1
  2489 ;; This function calls:
  2490 ;;		Nothing
  2491 ;; This function is called by:
  2492 ;;		_mV2Celcius
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496     0243                     ___awmod:	
  2497                           ;psect for function ___awmod
  2498                           
  2499     0243                     l1167:	
  2500                           ;incstack = 0
  2501                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  2502                           
  2503     0243  01F5               	clrf	___awmod@sign
  2504     0244                     l1169:
  2505     0244  1FF3               	btfss	___awmod@dividend+1,7
  2506     0245  2A47               	goto	u641
  2507     0246  2A48               	goto	u640
  2508     0247                     u641:
  2509     0247  2A4F               	goto	l1175
  2510     0248                     u640:
  2511     0248                     l1171:
  2512     0248  09F2               	comf	___awmod@dividend,f
  2513     0249  09F3               	comf	___awmod@dividend+1,f
  2514     024A  0AF2               	incf	___awmod@dividend,f
  2515     024B  1903               	skipnz
  2516     024C  0AF3               	incf	___awmod@dividend+1,f
  2517     024D                     l1173:
  2518     024D  01F5               	clrf	___awmod@sign
  2519     024E  0AF5               	incf	___awmod@sign,f
  2520     024F                     l1175:
  2521     024F  1FF1               	btfss	___awmod@divisor+1,7
  2522     0250  2A52               	goto	u651
  2523     0251  2A53               	goto	u650
  2524     0252                     u651:
  2525     0252  2A58               	goto	l1179
  2526     0253                     u650:
  2527     0253                     l1177:
  2528     0253  09F0               	comf	___awmod@divisor,f
  2529     0254  09F1               	comf	___awmod@divisor+1,f
  2530     0255  0AF0               	incf	___awmod@divisor,f
  2531     0256  1903               	skipnz
  2532     0257  0AF1               	incf	___awmod@divisor+1,f
  2533     0258                     l1179:
  2534     0258  0870               	movf	___awmod@divisor,w
  2535     0259  0471               	iorwf	___awmod@divisor+1,w
  2536     025A  1903               	btfsc	3,2
  2537     025B  2A5D               	goto	u661
  2538     025C  2A5E               	goto	u660
  2539     025D                     u661:
  2540     025D  2A8D               	goto	l1197
  2541     025E                     u660:
  2542     025E                     l1181:
  2543     025E  01F4               	clrf	___awmod@counter
  2544     025F  0AF4               	incf	___awmod@counter,f
  2545     0260  2A6C               	goto	l1187
  2546     0261                     l1183:
  2547     0261  3001               	movlw	1
  2548     0262                     u675:
  2549     0262  1003               	clrc
  2550     0263  0DF0               	rlf	___awmod@divisor,f
  2551     0264  0DF1               	rlf	___awmod@divisor+1,f
  2552     0265  3EFF               	addlw	-1
  2553     0266  1D03               	skipz
  2554     0267  2A62               	goto	u675
  2555     0268                     l1185:
  2556     0268  3001               	movlw	1
  2557     0269  00FF               	movwf	btemp+1
  2558     026A  087F               	movf	btemp+1,w
  2559     026B  07F4               	addwf	___awmod@counter,f
  2560     026C                     l1187:
  2561     026C  1FF1               	btfss	___awmod@divisor+1,7
  2562     026D  2A6F               	goto	u681
  2563     026E  2A70               	goto	u680
  2564     026F                     u681:
  2565     026F  2A61               	goto	l1183
  2566     0270                     u680:
  2567     0270                     l1189:
  2568     0270  0871               	movf	___awmod@divisor+1,w
  2569     0271  0273               	subwf	___awmod@dividend+1,w
  2570     0272  1D03               	skipz
  2571     0273  2A76               	goto	u695
  2572     0274  0870               	movf	___awmod@divisor,w
  2573     0275  0272               	subwf	___awmod@dividend,w
  2574     0276                     u695:
  2575     0276  1C03               	skipc
  2576     0277  2A79               	goto	u691
  2577     0278  2A7A               	goto	u690
  2578     0279                     u691:
  2579     0279  2A80               	goto	l1193
  2580     027A                     u690:
  2581     027A                     l1191:
  2582     027A  0870               	movf	___awmod@divisor,w
  2583     027B  02F2               	subwf	___awmod@dividend,f
  2584     027C  0871               	movf	___awmod@divisor+1,w
  2585     027D  1C03               	skipc
  2586     027E  03F3               	decf	___awmod@dividend+1,f
  2587     027F  02F3               	subwf	___awmod@dividend+1,f
  2588     0280                     l1193:
  2589     0280  3001               	movlw	1
  2590     0281                     u705:
  2591     0281  1003               	clrc
  2592     0282  0CF1               	rrf	___awmod@divisor+1,f
  2593     0283  0CF0               	rrf	___awmod@divisor,f
  2594     0284  3EFF               	addlw	-1
  2595     0285  1D03               	skipz
  2596     0286  2A81               	goto	u705
  2597     0287                     l1195:
  2598     0287  3001               	movlw	1
  2599     0288  02F4               	subwf	___awmod@counter,f
  2600     0289  1D03               	btfss	3,2
  2601     028A  2A8C               	goto	u711
  2602     028B  2A8D               	goto	u710
  2603     028C                     u711:
  2604     028C  2A70               	goto	l1189
  2605     028D                     u710:
  2606     028D                     l1197:
  2607     028D  0875               	movf	___awmod@sign,w
  2608     028E  1903               	btfsc	3,2
  2609     028F  2A91               	goto	u721
  2610     0290  2A92               	goto	u720
  2611     0291                     u721:
  2612     0291  2A97               	goto	l1201
  2613     0292                     u720:
  2614     0292                     l1199:
  2615     0292  09F2               	comf	___awmod@dividend,f
  2616     0293  09F3               	comf	___awmod@dividend+1,f
  2617     0294  0AF2               	incf	___awmod@dividend,f
  2618     0295  1903               	skipnz
  2619     0296  0AF3               	incf	___awmod@dividend+1,f
  2620     0297                     l1201:
  2621     0297  0873               	movf	___awmod@dividend+1,w
  2622     0298  00F1               	movwf	?___awmod+1
  2623     0299  0872               	movf	___awmod@dividend,w
  2624     029A  00F0               	movwf	?___awmod
  2625     029B                     l363:
  2626     029B  0008               	return
  2627     029C                     __end_of___awmod:
  2628                           
  2629                           	psect	text8
  2630     02FA                     __ptext8:	
  2631 ;; *************** function ___awdiv *****************
  2632 ;; Defined at:
  2633 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;  divisor         2    0[COMMON] int 
  2636 ;;  dividend        2    2[COMMON] int 
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;  quotient        2    6[COMMON] int 
  2639 ;;  sign            1    5[COMMON] unsigned char 
  2640 ;;  counter         1    4[COMMON] unsigned char 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  2    0[COMMON] int 
  2643 ;; Registers used:
  2644 ;;		wreg, status,2, status,0, btemp+1
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2650 ;;      Params:         4       0       0       0
  2651 ;;      Locals:         4       0       0       0
  2652 ;;      Temps:          0       0       0       0
  2653 ;;      Totals:         8       0       0       0
  2654 ;;Total ram usage:        8 bytes
  2655 ;; Hardware stack levels used: 1
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_mV2Celcius
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663     02FA                     ___awdiv:	
  2664                           ;psect for function ___awdiv
  2665                           
  2666     02FA                     l1123:	
  2667                           ;incstack = 0
  2668                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  2669                           
  2670     02FA  01F5               	clrf	___awdiv@sign
  2671     02FB                     l1125:
  2672     02FB  1FF1               	btfss	___awdiv@divisor+1,7
  2673     02FC  2AFE               	goto	u541
  2674     02FD  2AFF               	goto	u540
  2675     02FE                     u541:
  2676     02FE  2B06               	goto	l1131
  2677     02FF                     u540:
  2678     02FF                     l1127:
  2679     02FF  09F0               	comf	___awdiv@divisor,f
  2680     0300  09F1               	comf	___awdiv@divisor+1,f
  2681     0301  0AF0               	incf	___awdiv@divisor,f
  2682     0302  1903               	skipnz
  2683     0303  0AF1               	incf	___awdiv@divisor+1,f
  2684     0304                     l1129:
  2685     0304  01F5               	clrf	___awdiv@sign
  2686     0305  0AF5               	incf	___awdiv@sign,f
  2687     0306                     l1131:
  2688     0306  1FF3               	btfss	___awdiv@dividend+1,7
  2689     0307  2B09               	goto	u551
  2690     0308  2B0A               	goto	u550
  2691     0309                     u551:
  2692     0309  2B13               	goto	l1137
  2693     030A                     u550:
  2694     030A                     l1133:
  2695     030A  09F2               	comf	___awdiv@dividend,f
  2696     030B  09F3               	comf	___awdiv@dividend+1,f
  2697     030C  0AF2               	incf	___awdiv@dividend,f
  2698     030D  1903               	skipnz
  2699     030E  0AF3               	incf	___awdiv@dividend+1,f
  2700     030F                     l1135:
  2701     030F  3001               	movlw	1
  2702     0310  00FF               	movwf	btemp+1
  2703     0311  087F               	movf	btemp+1,w
  2704     0312  06F5               	xorwf	___awdiv@sign,f
  2705     0313                     l1137:
  2706     0313  01F6               	clrf	___awdiv@quotient
  2707     0314  01F7               	clrf	___awdiv@quotient+1
  2708     0315                     l1139:
  2709     0315  0870               	movf	___awdiv@divisor,w
  2710     0316  0471               	iorwf	___awdiv@divisor+1,w
  2711     0317  1903               	btfsc	3,2
  2712     0318  2B1A               	goto	u561
  2713     0319  2B1B               	goto	u560
  2714     031A                     u561:
  2715     031A  2B52               	goto	l1159
  2716     031B                     u560:
  2717     031B                     l1141:
  2718     031B  01F4               	clrf	___awdiv@counter
  2719     031C  0AF4               	incf	___awdiv@counter,f
  2720     031D  2B29               	goto	l1147
  2721     031E                     l1143:
  2722     031E  3001               	movlw	1
  2723     031F                     u575:
  2724     031F  1003               	clrc
  2725     0320  0DF0               	rlf	___awdiv@divisor,f
  2726     0321  0DF1               	rlf	___awdiv@divisor+1,f
  2727     0322  3EFF               	addlw	-1
  2728     0323  1D03               	skipz
  2729     0324  2B1F               	goto	u575
  2730     0325                     l1145:
  2731     0325  3001               	movlw	1
  2732     0326  00FF               	movwf	btemp+1
  2733     0327  087F               	movf	btemp+1,w
  2734     0328  07F4               	addwf	___awdiv@counter,f
  2735     0329                     l1147:
  2736     0329  1FF1               	btfss	___awdiv@divisor+1,7
  2737     032A  2B2C               	goto	u581
  2738     032B  2B2D               	goto	u580
  2739     032C                     u581:
  2740     032C  2B1E               	goto	l1143
  2741     032D                     u580:
  2742     032D                     l1149:
  2743     032D  3001               	movlw	1
  2744     032E                     u595:
  2745     032E  1003               	clrc
  2746     032F  0DF6               	rlf	___awdiv@quotient,f
  2747     0330  0DF7               	rlf	___awdiv@quotient+1,f
  2748     0331  3EFF               	addlw	-1
  2749     0332  1D03               	skipz
  2750     0333  2B2E               	goto	u595
  2751     0334  0871               	movf	___awdiv@divisor+1,w
  2752     0335  0273               	subwf	___awdiv@dividend+1,w
  2753     0336  1D03               	skipz
  2754     0337  2B3A               	goto	u605
  2755     0338  0870               	movf	___awdiv@divisor,w
  2756     0339  0272               	subwf	___awdiv@dividend,w
  2757     033A                     u605:
  2758     033A  1C03               	skipc
  2759     033B  2B3D               	goto	u601
  2760     033C  2B3E               	goto	u600
  2761     033D                     u601:
  2762     033D  2B45               	goto	l1155
  2763     033E                     u600:
  2764     033E                     l1151:
  2765     033E  0870               	movf	___awdiv@divisor,w
  2766     033F  02F2               	subwf	___awdiv@dividend,f
  2767     0340  0871               	movf	___awdiv@divisor+1,w
  2768     0341  1C03               	skipc
  2769     0342  03F3               	decf	___awdiv@dividend+1,f
  2770     0343  02F3               	subwf	___awdiv@dividend+1,f
  2771     0344                     l1153:
  2772     0344  1476               	bsf	___awdiv@quotient,0
  2773     0345                     l1155:
  2774     0345  3001               	movlw	1
  2775     0346                     u615:
  2776     0346  1003               	clrc
  2777     0347  0CF1               	rrf	___awdiv@divisor+1,f
  2778     0348  0CF0               	rrf	___awdiv@divisor,f
  2779     0349  3EFF               	addlw	-1
  2780     034A  1D03               	skipz
  2781     034B  2B46               	goto	u615
  2782     034C                     l1157:
  2783     034C  3001               	movlw	1
  2784     034D  02F4               	subwf	___awdiv@counter,f
  2785     034E  1D03               	btfss	3,2
  2786     034F  2B51               	goto	u621
  2787     0350  2B52               	goto	u620
  2788     0351                     u621:
  2789     0351  2B2D               	goto	l1149
  2790     0352                     u620:
  2791     0352                     l1159:
  2792     0352  0875               	movf	___awdiv@sign,w
  2793     0353  1903               	btfsc	3,2
  2794     0354  2B56               	goto	u631
  2795     0355  2B57               	goto	u630
  2796     0356                     u631:
  2797     0356  2B5C               	goto	l1163
  2798     0357                     u630:
  2799     0357                     l1161:
  2800     0357  09F6               	comf	___awdiv@quotient,f
  2801     0358  09F7               	comf	___awdiv@quotient+1,f
  2802     0359  0AF6               	incf	___awdiv@quotient,f
  2803     035A  1903               	skipnz
  2804     035B  0AF7               	incf	___awdiv@quotient+1,f
  2805     035C                     l1163:
  2806     035C  0877               	movf	___awdiv@quotient+1,w
  2807     035D  00F1               	movwf	?___awdiv+1
  2808     035E  0876               	movf	___awdiv@quotient,w
  2809     035F  00F0               	movwf	?___awdiv
  2810     0360                     l350:
  2811     0360  0008               	return
  2812     0361                     __end_of___awdiv:
  2813                           
  2814                           	psect	text9
  2815     01F6                     __ptext9:	
  2816 ;; *************** function _CommandLCD *****************
  2817 ;; Defined at:
  2818 ;;		line 48 in file "JordTermometerStyreBox.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;  command         1    wreg     unsigned char 
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;  command         1    4[COMMON] unsigned char 
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  1    wreg      void 
  2825 ;; Registers used:
  2826 ;;		wreg, status,2, status,0, pclath, cstack
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2832 ;;      Params:         0       0       0       0
  2833 ;;      Locals:         1       0       0       0
  2834 ;;      Temps:          0       0       0       0
  2835 ;;      Totals:         1       0       0       0
  2836 ;;Total ram usage:        1 bytes
  2837 ;; Hardware stack levels used: 1
  2838 ;; Hardware stack levels required when called: 1
  2839 ;; This function calls:
  2840 ;;		_wait
  2841 ;; This function is called by:
  2842 ;;		_updateLCD
  2843 ;;		_staticInfo
  2844 ;;		_main
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848     01F6                     _CommandLCD:	
  2849                           ;psect for function _CommandLCD
  2850                           
  2851                           
  2852                           ;incstack = 0
  2853                           ; Regs used in _CommandLCD: [wreg+status,2+status,0+pclath+cstack]
  2854                           ;CommandLCD@command stored from wreg
  2855     01F6  00F4               	movwf	CommandLCD@command
  2856     01F7                     l1205:
  2857                           
  2858                           ;JordTermometerStyreBox.c: 49:     PORTB = command & 0xFF;
  2859     01F7  0874               	movf	CommandLCD@command,w
  2860     01F8  1283               	bcf	3,5	;RP0=0, select bank0
  2861     01F9  1303               	bcf	3,6	;RP1=0, select bank0
  2862     01FA  0086               	movwf	6	;volatile
  2863     01FB                     l1207:
  2864                           
  2865                           ;JordTermometerStyreBox.c: 51:     if (PORTA != 0x00) {
  2866     01FB  0805               	movf	5,w	;volatile
  2867     01FC  1903               	btfsc	3,2
  2868     01FD  29FF               	goto	u731
  2869     01FE  2A00               	goto	u730
  2870     01FF                     u731:
  2871     01FF  2A06               	goto	l1213
  2872     0200                     u730:
  2873     0200                     l1209:
  2874                           
  2875                           ;JordTermometerStyreBox.c: 52:         PORTA = 0x00;
  2876     0200  0185               	clrf	5	;volatile
  2877     0201                     l1211:
  2878                           
  2879                           ;JordTermometerStyreBox.c: 53:         wait(50);
  2880     0201  3032               	movlw	50
  2881     0202  00F0               	movwf	wait@time
  2882     0203  3000               	movlw	0
  2883     0204  00F1               	movwf	wait@time+1
  2884     0205  2189               	fcall	_wait
  2885     0206                     l1213:
  2886                           
  2887                           ;JordTermometerStyreBox.c: 56:     wait(10);
  2888     0206  300A               	movlw	10
  2889     0207  00F0               	movwf	wait@time
  2890     0208  3000               	movlw	0
  2891     0209  00F1               	movwf	wait@time+1
  2892     020A  2189               	fcall	_wait
  2893     020B                     l1215:
  2894                           
  2895                           ;JordTermometerStyreBox.c: 58:     PORTAbits.RA2 = 1;
  2896     020B  1283               	bcf	3,5	;RP0=0, select bank0
  2897     020C  1303               	bcf	3,6	;RP1=0, select bank0
  2898     020D  1505               	bsf	5,2	;volatile
  2899     020E                     l1217:
  2900                           
  2901                           ;JordTermometerStyreBox.c: 60:     wait(50);
  2902     020E  3032               	movlw	50
  2903     020F  00F0               	movwf	wait@time
  2904     0210  3000               	movlw	0
  2905     0211  00F1               	movwf	wait@time+1
  2906     0212  2189               	fcall	_wait
  2907     0213                     l1219:
  2908                           
  2909                           ;JordTermometerStyreBox.c: 62:     PORTAbits.RA2 = 0;
  2910     0213  1283               	bcf	3,5	;RP0=0, select bank0
  2911     0214  1303               	bcf	3,6	;RP1=0, select bank0
  2912     0215  1105               	bcf	5,2	;volatile
  2913     0216                     l1221:
  2914                           
  2915                           ;JordTermometerStyreBox.c: 64:     wait(100);
  2916     0216  3064               	movlw	100
  2917     0217  00F0               	movwf	wait@time
  2918     0218  3000               	movlw	0
  2919     0219  00F1               	movwf	wait@time+1
  2920     021A  2189               	fcall	_wait
  2921     021B                     l30:
  2922     021B  0008               	return
  2923     021C                     __end_of_CommandLCD:
  2924                           
  2925                           	psect	text10
  2926     01D1                     __ptext10:	
  2927 ;; *************** function ___wmul *****************
  2928 ;; Defined at:
  2929 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;  multiplier      2    0[COMMON] unsigned int 
  2932 ;;  multiplicand    2    2[COMMON] unsigned int 
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;  product         2    4[COMMON] unsigned int 
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  2    0[COMMON] unsigned int 
  2937 ;; Registers used:
  2938 ;;		wreg, status,2, status,0
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2944 ;;      Params:         4       0       0       0
  2945 ;;      Locals:         2       0       0       0
  2946 ;;      Temps:          0       0       0       0
  2947 ;;      Totals:         6       0       0       0
  2948 ;;Total ram usage:        6 bytes
  2949 ;; Hardware stack levels used: 1
  2950 ;; This function calls:
  2951 ;;		Nothing
  2952 ;; This function is called by:
  2953 ;;		_readMessage
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957     01D1                     ___wmul:	
  2958                           ;psect for function ___wmul
  2959                           
  2960     01D1                     l1307:	
  2961                           ;incstack = 0
  2962                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2963                           
  2964     01D1  01F4               	clrf	___wmul@product
  2965     01D2  01F5               	clrf	___wmul@product+1
  2966     01D3                     l1309:
  2967     01D3  1C70               	btfss	___wmul@multiplier,0
  2968     01D4  29D6               	goto	u811
  2969     01D5  29D7               	goto	u810
  2970     01D6                     u811:
  2971     01D6  29DD               	goto	l197
  2972     01D7                     u810:
  2973     01D7                     l1311:
  2974     01D7  0872               	movf	___wmul@multiplicand,w
  2975     01D8  07F4               	addwf	___wmul@product,f
  2976     01D9  1803               	skipnc
  2977     01DA  0AF5               	incf	___wmul@product+1,f
  2978     01DB  0873               	movf	___wmul@multiplicand+1,w
  2979     01DC  07F5               	addwf	___wmul@product+1,f
  2980     01DD                     l197:
  2981     01DD  3001               	movlw	1
  2982     01DE                     u825:
  2983     01DE  1003               	clrc
  2984     01DF  0DF2               	rlf	___wmul@multiplicand,f
  2985     01E0  0DF3               	rlf	___wmul@multiplicand+1,f
  2986     01E1  3EFF               	addlw	-1
  2987     01E2  1D03               	skipz
  2988     01E3  29DE               	goto	u825
  2989     01E4                     l1313:
  2990     01E4  3001               	movlw	1
  2991     01E5                     u835:
  2992     01E5  1003               	clrc
  2993     01E6  0CF1               	rrf	___wmul@multiplier+1,f
  2994     01E7  0CF0               	rrf	___wmul@multiplier,f
  2995     01E8  3EFF               	addlw	-1
  2996     01E9  1D03               	skipz
  2997     01EA  29E5               	goto	u835
  2998     01EB                     l1315:
  2999     01EB  0870               	movf	___wmul@multiplier,w
  3000     01EC  0471               	iorwf	___wmul@multiplier+1,w
  3001     01ED  1D03               	btfss	3,2
  3002     01EE  29F0               	goto	u841
  3003     01EF  29F1               	goto	u840
  3004     01F0                     u841:
  3005     01F0  29D3               	goto	l1309
  3006     01F1                     u840:
  3007     01F1                     l1317:
  3008     01F1  0875               	movf	___wmul@product+1,w
  3009     01F2  00F1               	movwf	?___wmul+1
  3010     01F3  0874               	movf	___wmul@product,w
  3011     01F4  00F0               	movwf	?___wmul
  3012     01F5                     l199:
  3013     01F5  0008               	return
  3014     01F6                     __end_of___wmul:
  3015                           
  3016                           	psect	text11
  3017     03DE                     __ptext11:	
  3018 ;; *************** function _checkSignal *****************
  3019 ;; Defined at:
  3020 ;;		line 289 in file "JordTermometerStyreBox.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;		None
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;  i               2    8[COMMON] int 
  3025 ;;  i               2    6[COMMON] int 
  3026 ;;  i               2    4[COMMON] int 
  3027 ;;  j               2   10[COMMON] int 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      unsigned char 
  3030 ;; Registers used:
  3031 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3037 ;;      Params:         0       0       0       0
  3038 ;;      Locals:         8       0       0       0
  3039 ;;      Temps:          0       0       0       0
  3040 ;;      Totals:         8       0       0       0
  3041 ;;Total ram usage:        8 bytes
  3042 ;; Hardware stack levels used: 1
  3043 ;; Hardware stack levels required when called: 1
  3044 ;; This function calls:
  3045 ;;		_wait
  3046 ;; This function is called by:
  3047 ;;		_main
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051     03DE                     _checkSignal:	
  3052                           ;psect for function _checkSignal
  3053                           
  3054     03DE                     l1457:	
  3055                           ;incstack = 0
  3056                           ; Regs used in _checkSignal: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3057                           
  3058                           
  3059                           ;JordTermometerStyreBox.c: 290:     int j = 0;
  3060     03DE  01FA               	clrf	checkSignal@j
  3061     03DF  01FB               	clrf	checkSignal@j+1
  3062                           
  3063                           ;JordTermometerStyreBox.c: 291:     for (int i = 0; i < 15; i++) {
  3064     03E0  01F4               	clrf	checkSignal@i
  3065     03E1  01F5               	clrf	checkSignal@i+1
  3066     03E2                     l78:
  3067                           
  3068                           ;JordTermometerStyreBox.c: 292:         if (!PORTAbits.RA3) {
  3069     03E2  1283               	bcf	3,5	;RP0=0, select bank0
  3070     03E3  1303               	bcf	3,6	;RP1=0, select bank0
  3071     03E4  1985               	btfsc	5,3	;volatile
  3072     03E5  2BE7               	goto	u921
  3073     03E6  2BE8               	goto	u920
  3074     03E7                     u921:
  3075     03E7  2BEA               	goto	l1467
  3076     03E8                     u920:
  3077     03E8                     l1463:
  3078                           
  3079                           ;JordTermometerStyreBox.c: 293:             return 0;
  3080     03E8  3000               	movlw	0
  3081     03E9  2C90               	goto	l81
  3082     03EA                     l1467:
  3083                           
  3084                           ;JordTermometerStyreBox.c: 295:     }
  3085     03EA  3001               	movlw	1
  3086     03EB  07F4               	addwf	checkSignal@i,f
  3087     03EC  1803               	skipnc
  3088     03ED  0AF5               	incf	checkSignal@i+1,f
  3089     03EE  3000               	movlw	0
  3090     03EF  07F5               	addwf	checkSignal@i+1,f
  3091     03F0                     l1469:
  3092     03F0  0875               	movf	checkSignal@i+1,w
  3093     03F1  3A80               	xorlw	128
  3094     03F2  00FF               	movwf	btemp+1
  3095     03F3  3080               	movlw	128
  3096     03F4  027F               	subwf	btemp+1,w
  3097     03F5  1D03               	skipz
  3098     03F6  2BF9               	goto	u935
  3099     03F7  300F               	movlw	15
  3100     03F8  0274               	subwf	checkSignal@i,w
  3101     03F9                     u935:
  3102     03F9  1C03               	skipc
  3103     03FA  2BFC               	goto	u931
  3104     03FB  2BFD               	goto	u930
  3105     03FC                     u931:
  3106     03FC  2BE2               	goto	l78
  3107     03FD                     u930:
  3108     03FD  2C12               	goto	l1479
  3109     03FE                     l1471:
  3110                           
  3111                           ;JordTermometerStyreBox.c: 297:         if (j > 5) {
  3112     03FE  087B               	movf	checkSignal@j+1,w
  3113     03FF  3A80               	xorlw	128
  3114     0400  00FF               	movwf	btemp+1
  3115     0401  3080               	movlw	128
  3116     0402  027F               	subwf	btemp+1,w
  3117     0403  1D03               	skipz
  3118     0404  2C07               	goto	u945
  3119     0405  3006               	movlw	6
  3120     0406  027A               	subwf	checkSignal@j,w
  3121     0407                     u945:
  3122     0407  1C03               	skipc
  3123     0408  2C0A               	goto	u941
  3124     0409  2C0B               	goto	u940
  3125     040A                     u941:
  3126     040A  2C0C               	goto	l1477
  3127     040B                     u940:
  3128     040B  2BE8               	goto	l1463
  3129     040C                     l1477:
  3130                           
  3131                           ;JordTermometerStyreBox.c: 300:         j++;
  3132     040C  3001               	movlw	1
  3133     040D  07FA               	addwf	checkSignal@j,f
  3134     040E  1803               	skipnc
  3135     040F  0AFB               	incf	checkSignal@j+1,f
  3136     0410  3000               	movlw	0
  3137     0411  07FB               	addwf	checkSignal@j+1,f
  3138     0412                     l1479:
  3139                           
  3140                           ;JordTermometerStyreBox.c: 296:     while (PORTAbits.RA3) {
  3141     0412  1283               	bcf	3,5	;RP0=0, select bank0
  3142     0413  1303               	bcf	3,6	;RP1=0, select bank0
  3143     0414  1985               	btfsc	5,3	;volatile
  3144     0415  2C17               	goto	u951
  3145     0416  2C18               	goto	u950
  3146     0417                     u951:
  3147     0417  2BFE               	goto	l1471
  3148     0418                     u950:
  3149     0418                     l1481:
  3150                           
  3151                           ;JordTermometerStyreBox.c: 302:     j = 0;
  3152     0418  01FA               	clrf	checkSignal@j
  3153     0419  01FB               	clrf	checkSignal@j+1
  3154                           
  3155                           ;JordTermometerStyreBox.c: 303:     for (int i = 0; i < 7; i++) {
  3156     041A  01F6               	clrf	checkSignal@i_109
  3157     041B  01F7               	clrf	checkSignal@i_109+1
  3158     041C                     l86:
  3159                           
  3160                           ;JordTermometerStyreBox.c: 304:         if (PORTAbits.RA3) {
  3161     041C  1283               	bcf	3,5	;RP0=0, select bank0
  3162     041D  1303               	bcf	3,6	;RP1=0, select bank0
  3163     041E  1D85               	btfss	5,3	;volatile
  3164     041F  2C21               	goto	u961
  3165     0420  2C22               	goto	u960
  3166     0421                     u961:
  3167     0421  2C23               	goto	l1491
  3168     0422                     u960:
  3169     0422  2BE8               	goto	l1463
  3170     0423                     l1491:
  3171                           
  3172                           ;JordTermometerStyreBox.c: 307:     }
  3173     0423  3001               	movlw	1
  3174     0424  07F6               	addwf	checkSignal@i_109,f
  3175     0425  1803               	skipnc
  3176     0426  0AF7               	incf	checkSignal@i_109+1,f
  3177     0427  3000               	movlw	0
  3178     0428  07F7               	addwf	checkSignal@i_109+1,f
  3179     0429                     l1493:
  3180     0429  0877               	movf	checkSignal@i_109+1,w
  3181     042A  3A80               	xorlw	128
  3182     042B  00FF               	movwf	btemp+1
  3183     042C  3080               	movlw	128
  3184     042D  027F               	subwf	btemp+1,w
  3185     042E  1D03               	skipz
  3186     042F  2C32               	goto	u975
  3187     0430  3007               	movlw	7
  3188     0431  0276               	subwf	checkSignal@i_109,w
  3189     0432                     u975:
  3190     0432  1C03               	skipc
  3191     0433  2C35               	goto	u971
  3192     0434  2C36               	goto	u970
  3193     0435                     u971:
  3194     0435  2C1C               	goto	l86
  3195     0436                     u970:
  3196     0436  2C4B               	goto	l1503
  3197     0437                     l1495:
  3198                           
  3199                           ;JordTermometerStyreBox.c: 309:         if (j > 10) {
  3200     0437  087B               	movf	checkSignal@j+1,w
  3201     0438  3A80               	xorlw	128
  3202     0439  00FF               	movwf	btemp+1
  3203     043A  3080               	movlw	128
  3204     043B  027F               	subwf	btemp+1,w
  3205     043C  1D03               	skipz
  3206     043D  2C40               	goto	u985
  3207     043E  300B               	movlw	11
  3208     043F  027A               	subwf	checkSignal@j,w
  3209     0440                     u985:
  3210     0440  1C03               	skipc
  3211     0441  2C43               	goto	u981
  3212     0442  2C44               	goto	u980
  3213     0443                     u981:
  3214     0443  2C45               	goto	l1501
  3215     0444                     u980:
  3216     0444  2BE8               	goto	l1463
  3217     0445                     l1501:
  3218                           
  3219                           ;JordTermometerStyreBox.c: 312:         j++;
  3220     0445  3001               	movlw	1
  3221     0446  07FA               	addwf	checkSignal@j,f
  3222     0447  1803               	skipnc
  3223     0448  0AFB               	incf	checkSignal@j+1,f
  3224     0449  3000               	movlw	0
  3225     044A  07FB               	addwf	checkSignal@j+1,f
  3226     044B                     l1503:
  3227                           
  3228                           ;JordTermometerStyreBox.c: 308:     while (!PORTAbits.RA3) {
  3229     044B  1283               	bcf	3,5	;RP0=0, select bank0
  3230     044C  1303               	bcf	3,6	;RP1=0, select bank0
  3231     044D  1D85               	btfss	5,3	;volatile
  3232     044E  2C50               	goto	u991
  3233     044F  2C51               	goto	u990
  3234     0450                     u991:
  3235     0450  2C37               	goto	l1495
  3236     0451                     u990:
  3237     0451                     l1505:
  3238                           
  3239                           ;JordTermometerStyreBox.c: 314:     j = 0;
  3240     0451  01FA               	clrf	checkSignal@j
  3241     0452  01FB               	clrf	checkSignal@j+1
  3242                           
  3243                           ;JordTermometerStyreBox.c: 315:     for (int i = 0; i < 7; i++) {
  3244     0453  01F8               	clrf	checkSignal@i_110
  3245     0454  01F9               	clrf	checkSignal@i_110+1
  3246     0455                     l93:
  3247                           
  3248                           ;JordTermometerStyreBox.c: 316:         if (!PORTAbits.RA3) {
  3249     0455  1283               	bcf	3,5	;RP0=0, select bank0
  3250     0456  1303               	bcf	3,6	;RP1=0, select bank0
  3251     0457  1985               	btfsc	5,3	;volatile
  3252     0458  2C5A               	goto	u1001
  3253     0459  2C5B               	goto	u1000
  3254     045A                     u1001:
  3255     045A  2C5C               	goto	l1515
  3256     045B                     u1000:
  3257     045B  2BE8               	goto	l1463
  3258     045C                     l1515:
  3259                           
  3260                           ;JordTermometerStyreBox.c: 319:     }
  3261     045C  3001               	movlw	1
  3262     045D  07F8               	addwf	checkSignal@i_110,f
  3263     045E  1803               	skipnc
  3264     045F  0AF9               	incf	checkSignal@i_110+1,f
  3265     0460  3000               	movlw	0
  3266     0461  07F9               	addwf	checkSignal@i_110+1,f
  3267     0462                     l1517:
  3268     0462  0879               	movf	checkSignal@i_110+1,w
  3269     0463  3A80               	xorlw	128
  3270     0464  00FF               	movwf	btemp+1
  3271     0465  3080               	movlw	128
  3272     0466  027F               	subwf	btemp+1,w
  3273     0467  1D03               	skipz
  3274     0468  2C6B               	goto	u1015
  3275     0469  3007               	movlw	7
  3276     046A  0278               	subwf	checkSignal@i_110,w
  3277     046B                     u1015:
  3278     046B  1C03               	skipc
  3279     046C  2C6E               	goto	u1011
  3280     046D  2C6F               	goto	u1010
  3281     046E                     u1011:
  3282     046E  2C55               	goto	l93
  3283     046F                     u1010:
  3284     046F  2C84               	goto	l1527
  3285     0470                     l1519:
  3286                           
  3287                           ;JordTermometerStyreBox.c: 321:         if (j > 10) {
  3288     0470  087B               	movf	checkSignal@j+1,w
  3289     0471  3A80               	xorlw	128
  3290     0472  00FF               	movwf	btemp+1
  3291     0473  3080               	movlw	128
  3292     0474  027F               	subwf	btemp+1,w
  3293     0475  1D03               	skipz
  3294     0476  2C79               	goto	u1025
  3295     0477  300B               	movlw	11
  3296     0478  027A               	subwf	checkSignal@j,w
  3297     0479                     u1025:
  3298     0479  1C03               	skipc
  3299     047A  2C7C               	goto	u1021
  3300     047B  2C7D               	goto	u1020
  3301     047C                     u1021:
  3302     047C  2C7E               	goto	l1525
  3303     047D                     u1020:
  3304     047D  2BE8               	goto	l1463
  3305     047E                     l1525:
  3306                           
  3307                           ;JordTermometerStyreBox.c: 324:         j++;
  3308     047E  3001               	movlw	1
  3309     047F  07FA               	addwf	checkSignal@j,f
  3310     0480  1803               	skipnc
  3311     0481  0AFB               	incf	checkSignal@j+1,f
  3312     0482  3000               	movlw	0
  3313     0483  07FB               	addwf	checkSignal@j+1,f
  3314     0484                     l1527:
  3315                           
  3316                           ;JordTermometerStyreBox.c: 320:     while (PORTAbits.RA3) {
  3317     0484  1283               	bcf	3,5	;RP0=0, select bank0
  3318     0485  1303               	bcf	3,6	;RP1=0, select bank0
  3319     0486  1985               	btfsc	5,3	;volatile
  3320     0487  2C89               	goto	u1031
  3321     0488  2C8A               	goto	u1030
  3322     0489                     u1031:
  3323     0489  2C70               	goto	l1519
  3324     048A                     u1030:
  3325     048A                     l1529:
  3326     048A                     l1531:
  3327                           
  3328                           ;JordTermometerStyreBox.c: 327:     wait(13);
  3329     048A  300D               	movlw	13
  3330     048B  00F0               	movwf	wait@time
  3331     048C  3000               	movlw	0
  3332     048D  00F1               	movwf	wait@time+1
  3333     048E  2189               	fcall	_wait
  3334     048F                     l1533:
  3335                           
  3336                           ;JordTermometerStyreBox.c: 329:     return 1;
  3337     048F  3001               	movlw	1
  3338     0490                     l81:
  3339     0490  0008               	return
  3340     0491                     __end_of_checkSignal:
  3341                           
  3342                           	psect	text12
  3343     0189                     __ptext12:	
  3344 ;; *************** function _wait *****************
  3345 ;; Defined at:
  3346 ;;		line 40 in file "JordTermometerStyreBox.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;  time            2    0[COMMON] unsigned int 
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;  t               2    2[COMMON] unsigned int 
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  1    wreg      void 
  3353 ;; Registers used:
  3354 ;;		wreg, status,2, status,0
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3360 ;;      Params:         2       0       0       0
  3361 ;;      Locals:         2       0       0       0
  3362 ;;      Temps:          0       0       0       0
  3363 ;;      Totals:         4       0       0       0
  3364 ;;Total ram usage:        4 bytes
  3365 ;; Hardware stack levels used: 1
  3366 ;; This function calls:
  3367 ;;		Nothing
  3368 ;; This function is called by:
  3369 ;;		_CommandLCD
  3370 ;;		_readMessage
  3371 ;;		_checkSignal
  3372 ;;		_main
  3373 ;; This function uses a non-reentrant model
  3374 ;;
  3375                           
  3376     0189                     _wait:	
  3377                           ;psect for function _wait
  3378                           
  3379     0189                     l1113:	
  3380                           ;incstack = 0
  3381                           ; Regs used in _wait: [wreg+status,2+status,0]
  3382                           
  3383                           
  3384                           ;JordTermometerStyreBox.c: 41:     unsigned int t = time;
  3385     0189  0871               	movf	wait@time+1,w
  3386     018A  00F3               	movwf	wait@t+1
  3387     018B  0870               	movf	wait@time,w
  3388     018C  00F2               	movwf	wait@t
  3389                           
  3390                           ;JordTermometerStyreBox.c: 42:     while (t > 0) {
  3391     018D  2994               	goto	l1117
  3392     018E                     l1115:
  3393                           
  3394                           ;JordTermometerStyreBox.c: 43:         t--;
  3395     018E  3001               	movlw	1
  3396     018F  02F2               	subwf	wait@t,f
  3397     0190  3000               	movlw	0
  3398     0191  1C03               	skipc
  3399     0192  03F3               	decf	wait@t+1,f
  3400     0193  02F3               	subwf	wait@t+1,f
  3401     0194                     l1117:
  3402                           
  3403                           ;JordTermometerStyreBox.c: 42:     while (t > 0) {
  3404     0194  0872               	movf	wait@t,w
  3405     0195  0473               	iorwf	wait@t+1,w
  3406     0196  1D03               	btfss	3,2
  3407     0197  2999               	goto	u531
  3408     0198  299A               	goto	u530
  3409     0199                     u531:
  3410     0199  298E               	goto	l1115
  3411     019A                     u530:
  3412     019A                     l26:
  3413     019A  0008               	return
  3414     019B                     __end_of_wait:
  3415                           
  3416                           	psect	text13
  3417     016A                     __ptext13:	
  3418 ;; *************** function _TimerInit *****************
  3419 ;; Defined at:
  3420 ;;		line 34 in file "JordTermometerStyreBox.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;		None
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;		None
  3425 ;; Return value:  Size  Location     Type
  3426 ;;                  1    wreg      void 
  3427 ;; Registers used:
  3428 ;;		wreg
  3429 ;; Tracked objects:
  3430 ;;		On entry : 0/0
  3431 ;;		On exit  : 0/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3434 ;;      Params:         0       0       0       0
  3435 ;;      Locals:         0       0       0       0
  3436 ;;      Temps:          0       0       0       0
  3437 ;;      Totals:         0       0       0       0
  3438 ;;Total ram usage:        0 bytes
  3439 ;; Hardware stack levels used: 1
  3440 ;; This function calls:
  3441 ;;		Nothing
  3442 ;; This function is called by:
  3443 ;;		_main
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447     016A                     _TimerInit:	
  3448                           ;psect for function _TimerInit
  3449                           
  3450     016A                     l873:	
  3451                           ;incstack = 0
  3452                           ; Regs used in _TimerInit: [wreg]
  3453                           
  3454                           
  3455                           ;JordTermometerStyreBox.c: 35:     OPTION_REG = 0b11000011;
  3456     016A  30C3               	movlw	195
  3457     016B  1683               	bsf	3,5	;RP0=1, select bank1
  3458     016C  1303               	bcf	3,6	;RP1=0, select bank1
  3459     016D  0081               	movwf	1	;volatile
  3460     016E                     l20:
  3461     016E  0008               	return
  3462     016F                     __end_of_TimerInit:
  3463                           
  3464                           	psect	text14
  3465     017B                     __ptext14:	
  3466 ;; *************** function _IOInit *****************
  3467 ;; Defined at:
  3468 ;;		line 26 in file "JordTermometerStyreBox.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;		None
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;		None
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  1    wreg      void 
  3475 ;; Registers used:
  3476 ;;		wreg, status,2
  3477 ;; Tracked objects:
  3478 ;;		On entry : 0/0
  3479 ;;		On exit  : 0/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3482 ;;      Params:         0       0       0       0
  3483 ;;      Locals:         0       0       0       0
  3484 ;;      Temps:          0       0       0       0
  3485 ;;      Totals:         0       0       0       0
  3486 ;;Total ram usage:        0 bytes
  3487 ;; Hardware stack levels used: 1
  3488 ;; This function calls:
  3489 ;;		Nothing
  3490 ;; This function is called by:
  3491 ;;		_main
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495     017B                     _IOInit:	
  3496                           ;psect for function _IOInit
  3497                           
  3498     017B                     l863:	
  3499                           ;incstack = 0
  3500                           ; Regs used in _IOInit: [wreg+status,2]
  3501                           
  3502                           
  3503                           ;JordTermometerStyreBox.c: 27:     ADCON1 = 0x06;
  3504     017B  3006               	movlw	6
  3505     017C  1683               	bsf	3,5	;RP0=1, select bank1
  3506     017D  1303               	bcf	3,6	;RP1=0, select bank1
  3507     017E  009F               	movwf	31	;volatile
  3508     017F                     l865:
  3509                           
  3510                           ;JordTermometerStyreBox.c: 28:     PORTA = 0;
  3511     017F  1283               	bcf	3,5	;RP0=0, select bank0
  3512     0180  1303               	bcf	3,6	;RP1=0, select bank0
  3513     0181  0185               	clrf	5	;volatile
  3514     0182                     l867:
  3515                           
  3516                           ;JordTermometerStyreBox.c: 29:     PORTB = 0;
  3517     0182  0186               	clrf	6	;volatile
  3518     0183                     l869:
  3519                           
  3520                           ;JordTermometerStyreBox.c: 30:     TRISB = 0;
  3521     0183  1683               	bsf	3,5	;RP0=1, select bank1
  3522     0184  1303               	bcf	3,6	;RP1=0, select bank1
  3523     0185  0186               	clrf	6	;volatile
  3524     0186                     l871:
  3525                           
  3526                           ;JordTermometerStyreBox.c: 31:     TRISA = 0b00001000;
  3527     0186  3008               	movlw	8
  3528     0187  0085               	movwf	5	;volatile
  3529     0188                     l17:
  3530     0188  0008               	return
  3531     0189                     __end_of_IOInit:
  3532     007E                     btemp	set	126	;btemp
  3533     007E                     wtemp0	set	126
  3534                           
  3535                           	psect	config
  3536                           
  3537                           ;Config register CONFIG @ 0x2007
  3538                           ;	Oscillator Selection bits
  3539                           ;	FOSC = INTOSCIO, INTRC oscillator; port I/O function on both RA6/OSC2/CLKO pin and RA7
      +                          /OSC1/CLKI pin
  3540                           ;	Watchdog Timer Enable bit
  3541                           ;	WDTE = OFF, WDT disabled
  3542                           ;	Power-up Timer Enable bit
  3543                           ;	PWRTE = ON, PWRT enabled
  3544                           ;	RA5/MCLR/VPP Pin Function Select bit
  3545                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital I/O, MCLR internally tied to VDD
  3546                           ;	Brown-out Reset Enable bit
  3547                           ;	BOREN = OFF, BOR disabled
  3548                           ;	Low-Voltage Programming Enable bit
  3549                           ;	LVP = OFF, RB3/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  3550                           ;	Data EE Memory Code Protection bit
  3551                           ;	CPD = OFF, Code protection off
  3552                           ;	Flash Program Memory Write Enable bits
  3553                           ;	WRT = OFF, Write protection off
  3554                           ;	In-Circuit Debugger Mode bit
  3555                           ;	DEBUG = 0x1, unprogrammed default
  3556                           ;	CCP1 Pin Selection bit
  3557                           ;	CCPMX = RB2, CCP1 function on RB2
  3558                           ;	Flash Program Memory Code Protection bit
  3559                           ;	CP = OFF, Code protection off
  3560     2007                     	org	8199
  3561     2007  3F10               	dw	16144

Data Sizes:
    Strings     25
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     31      37
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    sp__mV2Celcius	PTR unsigned char  size(1) Largest target is 6
		 -> mV2Celcius@tempStr(BANK0[6]), 

    updateLCD@tempStr	PTR unsigned char  size(1) Largest target is 6
		 -> mV2Celcius@tempStr(BANK0[6]), 

    updateLCD@tempStr_93	PTR unsigned char  size(1) Largest target is 6
		 -> mV2Celcius@tempStr(BANK0[6]), 

    writeString@string	PTR unsigned char  size(2) Largest target is 6
		 -> mV2Celcius@tempStr(BANK0[6]), STR_1(CODE[5]), STR_10(CODE[2]), STR_2(CODE[5]), 
		 -> STR_3(CODE[5]), STR_4(CODE[5]), STR_5(CODE[5]), STR_6(CODE[5]), 
		 -> STR_7(CODE[4]), STR_8(CODE[2]), STR_9(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_checkSignal
    _staticInfo->_CommandLCD
    _staticInfo->_writeString
    _readMessage->_updateLCD
    _updateLCD->_mV2Celcius
    _writeString->_writeChar
    _mV2Celcius->___awdiv
    _CommandLCD->_wait
    _checkSignal->_wait

Critical Paths under _main in BANK0

    _main->_readMessage
    _readMessage->_updateLCD
    _updateLCD->_mV2Celcius

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19771
                         _CommandLCD
                             _IOInit
                          _TimerInit
                        _checkSignal
                        _readMessage
                         _staticInfo
                               _wait
 ---------------------------------------------------------------------------------
 (1) _staticInfo                                           0     0      0    4078
                         _CommandLCD
                          _writeChar
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _readMessage                                         18    18      0    9166
                                             13 BANK0     18    18      0
                             ___wmul
                          _updateLCD
                               _wait
 ---------------------------------------------------------------------------------
 (2) _updateLCD                                            7     2      5    6119
                                             10 COMMON     2     2      0
                                              8 BANK0      5     0      5
                         _CommandLCD
                             ___wmul (ARG)
                         _mV2Celcius
                        _writeString
 ---------------------------------------------------------------------------------
 (2) _writeString                                          4     1      3    1936
                                              1 COMMON     4     1      3
                          _writeChar
 ---------------------------------------------------------------------------------
 (3) _writeChar                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _mV2Celcius                                          10     8      2    1559
                                              8 COMMON     2     0      2
                                              0 BANK0      8     8      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     600
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     604
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _CommandLCD                                           1     1      0    2120
                                              4 COMMON     1     1      0
                               _wait
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     244
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _checkSignal                                          8     8      0    2309
                                              4 COMMON     8     8      0
                               _wait
 ---------------------------------------------------------------------------------
 (1) _wait                                                 4     2      2    2098
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _TimerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IOInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CommandLCD
     _wait
   _IOInit
   _TimerInit
   _checkSignal
     _wait
   _readMessage
     ___wmul
     _updateLCD
       _CommandLCD
       ___wmul (ARG)
       _mV2Celcius (ARG)
         ___awdiv
         ___awmod
       _writeString (ARG)
         _writeChar
     _wait
   _staticInfo
     _CommandLCD
     _writeChar
     _writeString
   _wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     1F      25       3       46.2%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      31       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      31      10        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Apr 11 08:20:51 2025

                            pc 0002                             l20 016E                             l30 021B  
                           l17 0188                             l33 017A                             l26 019A  
                           l46 02F9                             l62 0517                             l39 01B2  
                           l81 0490                             l73 07CD                             l65 05EA  
                           l59 03DD                             l75 07F5                             l68 06BD  
                           l93 0455                             l86 041C                             l78 03E2  
                 ___awdiv@sign 0075                             fsr 0004            ___wmul@multiplicand 0072  
                          l102 0242                            l350 0360                            l363 029B  
                          l197 01DD                            l199 01F5                            l871 0186  
                          l863 017B                            l865 017F                            l873 016A  
                          l867 0182                            l869 0183                            u600 033E  
                          u601 033D                            u530 019A                            u531 0199  
                          u620 0352                            u540 02FF                            u621 0351  
                          u605 033A                            u541 02FE                            u630 0357  
                          u550 030A                            u710 028D                            u631 0356  
                          u615 0346                            u551 0309                            u711 028C  
                          u560 031B                            u720 0292                            u640 0248  
                          u800 03C0                            u561 031A                            u721 0291  
                          u705 0281                            u641 0247                            u801 03BF  
                          u810 01D7                            u730 0200                            u650 0253  
                          u811 01D6                            u731 01FF                            u651 0252  
                          u580 032D                            u660 025E                            u740 01B2  
                          u900 07C2                            u581 032C                            u661 025D  
                          u741 01B1                            u901 07C1                            u750 02AE  
                          u910 07CB                            u575 031F                            u751 02AD  
                          u911 07CA                            u920 03E8                            u840 01F1  
                          u680 0270                            u760 0368                            u921 03E7  
                          u841 01F0                            u825 01DE                            u681 026F  
                          u761 0367                            u930 03FD                            u690 027A  
                          u770 0380                            u850 051D                            u931 03FC  
                          u835 01E5                            u595 032E                            u691 0279  
                          u675 0262                            u771 037F                            u851 051C  
                          u940 040B                            u780 0385                            u860 05F0  
                          u941 040A                            u781 0384                            u861 05EF  
                          u950 0418                            u790 03BB                            u870 06C3  
                          u951 0417                            u935 03F9                            u695 0276  
                          u791 03BA                            u871 06C2                            u960 0422  
                          u961 0421                            u945 0407                            u970 0436  
                          u971 0435                            u980 0444                            u981 0443  
                          u885 074B                            u990 0451                            u991 0450  
                          u975 0432                            u895 07AF                            u985 0440  
                          fsr0 0004                            indf 0000                   ___awmod@sign 0075  
                         l1113 0189                           l1201 0297                           l1115 018E  
                         l1211 0201                           l1131 0306                           l1123 02FA  
                         l1117 0194                           l1221 0216                           l1213 0206  
                         l1205 01F7                           l1141 031B                           l1133 030A  
                         l1125 02FB                           l1301 03CC                           l1311 01D7  
                         l1215 020B                           l1207 01FB                           l1151 033E  
                         l1143 031E                           l1135 030F                           l1127 02FF  
                         l1119 0170                           l1231 01AC                           l1303 03D4  
                         l1313 01E4                           l1217 020E                           l1209 0200  
                         l1161 0357                           l1153 0344                           l1145 0325  
                         l1137 0313                           l1129 0304                           l1241 02B3  
                         l1233 029C                           l1225 019B                           l1305 03D6  
                         l1401 0645                           l1321 0491                           l1315 01EB  
                         l1307 01D1                           l1219 0213                           l1163 035C  
                         l1155 0345                           l1147 0329                           l1139 0315  
                         l1171 0248                           l1251 02E4                           l1243 02B6  
                         l1235 02A2                           l1227 019D                           l1411 068F  
                         l1403 064F                           l1331 04C2                           l1323 049A  
                         l1501 0445                           l1317 01F1                           l1309 01D3  
                         l1157 034C                           l1149 032D                           l1181 025E  
                         l1173 024D                           l1253 02F4                           l1245 02B8  
                         l1237 02AA                           l1229 01A8                           l1261 0361  
                         l1421 06C3                           l1413 0690                           l1405 0667  
                         l1341 04EF                           l1333 04C7                           l1325 049F  
                         l1503 044B                           l1159 0352                           l1191 027A  
                         l1183 0261                           l1175 024F                           l1167 0243  
                         l1255 02F7                           l1247 02C7                           l1239 02AE  
                         l1271 0380                           l1263 0368                           l1431 06F0  
                         l1423 06C8                           l1415 0695                           l1407 0668  
                         l1351 0522                           l1343 04F9                           l1335 04D1  
                         l1327 04A9                           l1505 0451                           l1193 0280  
                         l1185 0268                           l1177 0253                           l1169 0244  
                         l1257 02F8                           l1249 02D6                           l1273 0385  
                         l1281 0399                           l1265 036A                           l1441 0723  
                         l1433 0712                           l1425 06D2                           l1417 069F  
                         l1409 0677                           l1361 056C                           l1353 052C  
                         l1345 0511                           l1337 04E9                           l1329 04C1  
                         l1531 048A                           l1515 045C                           l1195 0287  
                         l1187 026C                           l1179 0258                           l1291 03B4  
                         l1283 039B                           l1275 0387                           l1267 0372  
                         l1451 07C5                           l1443 0728                           l1435 0713  
                         l1427 06EA                           l1419 06B7                           l1371 0595  
                         l1363 056D                           l1355 0544                           l1347 0512  
                         l1339 04EA                           l1533 048F                           l1525 047E  
                         l1517 0462                           l1189 0270                           l1197 028D  
                         l1293 03BB                           l1277 038F                           l1269 0379  
                         l1285 03A3                           l1453 07CB                           l1445 07B9  
                         l1437 0718                           l1429 06EB                           l1381 05CC  
                         l1373 05A4                           l1365 0572                           l1357 0545  
                         l1349 051D                           l1541 0225                           l1519 0470  
                         l1527 0484                           l1471 03FE                           l1463 03E8  
                         l1199 0292                           l1295 03C0                           l1287 03A5  
                         l1279 0391                           l1455 07CF                           l1447 07BA  
                         l1439 0722                           l1391 0617                           l1383 05E4  
                         l1375 05BC                           l1367 057C                           l1359 054A  
                         l1543 022E                           l1551 01C7                           l1529 048A  
                         l1481 0418                           l1457 03DE                           l1297 03C2  
                         l1289 03AD                           l1449 07C2                           l1393 0618  
                         l1385 05F0                           l1377 05BD                           l1369 0594  
                         l1545 0230                           l1537 021C                           l1553 01C8  
                         l1491 0423                           l1467 03EA                           l1299 03CA  
                         l1395 061D                           l1387 05F5                           l1379 05C2  
                         l1547 023B                           l1539 0223                           l1555 01CE  
                         l1493 0429                           l1477 040C                           l1469 03F0  
                         l1397 063F                           l1389 05FF                           l1549 01B3  
                         l1495 0437                           l1479 0412                           l1399 0640  
                         STR_1 001B                           STR_2 0016                           STR_3 0011  
                         STR_4 001B                           STR_5 0016                           STR_6 0011  
                         STR_7 0020                           STR_8 0028                           STR_9 0024  
                         u1000 045B                           u1001 045A                           u1010 046F  
                         u1011 046E                           u1020 047D                           u1021 047C  
                         u1030 048A                           u1031 0489                           u1015 046B  
                         u1040 01CE                           u1025 0479                           u1041 01CD  
                         _main 01B3                           _wait 0189                           btemp 007E  
                         start 0000                   ?_readMessage 0070                          ?_main 0070  
              __end_of___awdiv 0361                          STR_10 0028                __end_of___awmod 029C  
                        ?_wait 0070                ___awdiv@divisor 0070                ___awdiv@counter 0074  
                        _PORTA 0005                          _PORTB 0006                          _TRISA 0085  
                        _TRISB 0086                     _CommandLCD 01F6                    _writeString 019B  
                        pclath 000A                          wait@t 0072                          status 0003  
                        wtemp0 007E                __initialization 07F6            mV2Celcius@milivolts 0020  
                 __end_of_main 01D1                   __end_of_wait 019B                         ??_main 007C  
                       ??_wait 0072                         _ADCON1 009F               ___awdiv@dividend 0072  
                updateLCD@line 002A                     _mV2Celcius 029C                         _IOInit 017B  
              readMessage@Batt 0035                readMessage@temp 003B                         ___wmul 01D1  
                    ??___awdiv 0074                      ??___awmod 0074               ___awdiv@quotient 0076  
              ___awmod@divisor 0070                ___awmod@counter 0074                    ?_CommandLCD 0070  
      __end_of__initialization 07FE         readMessage@Batt_status 0039           mV2Celcius@inputValue 0078  
               __pcstackCOMMON 0070               mV2Celcius@totalC 0026                     __pbssBANK0 003F  
                  ?_mV2Celcius 0078                        ?_IOInit 0070              __end_of_TimerInit 016F  
                   __pmaintext 01B3       readMessage@Termometer_id 0036                        ?___wmul 0070  
               updateLCD@error 002C                 updateLCD@value 0028             writeChar@character 0070  
                 ?_writeString 0071                     __stringtab 0001            updateLCD@tempStr_93 007B  
                      ___awdiv 02FA                        ___awmod 0243                  ??_checkSignal 0074  
                      __ptext1 021C                        __ptext2 0491                        __ptext3 0361  
                      __ptext4 019B                        __ptext5 016F                        __ptext6 029C  
                      __ptext7 0243                        __ptext8 02FA                        __ptext9 01F6  
             updateLCD@tempStr 007A  readMessage@Expected_check_bit 0038               ___awmod@dividend 0072  
         end_of_initialization 07FE         readMessage@Error_state 0034              CommandLCD@command 0074  
            __end_of_updateLCD 03DE                      _PORTAbits 0005              __end_of_writeChar 017B  
                 ??_CommandLCD 0074            __end_of_checkSignal 0491                     _staticInfo 021C  
            mV2Celcius@decPart 0022                   writeString@i 0074           readMessage@temp_data 003D  
               __end_of_IOInit 0189              mV2Celcius@intPart 0024             __end_of_CommandLCD 021C  
            mV2Celcius@tempStr 003F              writeString@length 0073                 __end_of___wmul 01F6  
            writeString@string 0071            start_initialization 07F6                   ??_mV2Celcius 007A  
                     ??_IOInit 0070                      _TimerInit 016A                       ??___wmul 0074  
                ??_readMessage 002D             updateLCD@batStatus 002B                   checkSignal@i 0074  
                 checkSignal@j 007A                    _checkSignal 03DE             __end_of_mV2Celcius 02FA  
                    ___latbits 0000                  __pcstackBANK0 0020                    ?_staticInfo 0070  
                   ?_TimerInit 0070                       ?___awdiv 0070                       ?___awmod 0070  
                    __pstrings 0001            __end_of_readMessage 07F6                 ___wmul@product 0074  
                    _updateLCD 0361                    __stringbase 0010              ___wmul@multiplier 0070  
                    _writeChar 016F                    ??_TimerInit 0070                     ?_updateLCD 0028  
                  _readMessage 0491             __end_of__stringtab 0011                     ?_writeChar 0070  
                     __ptext10 01D1                       __ptext11 03DE                       __ptext12 0189  
                     __ptext13 016A                       __ptext14 017B                   ?_checkSignal 0070  
                ??_writeString 0074                   ??_staticInfo 0075               checkSignal@i_110 0078  
             checkSignal@i_109 0076                       wait@time 0070                      stringcode 000B  
                  ??_updateLCD 007A             __end_of_staticInfo 0243                     _OPTION_REG 0081  
                     stringdir 000B                       stringtab 0001                    ??_writeChar 0070  
          __end_of_writeString 01B3  
